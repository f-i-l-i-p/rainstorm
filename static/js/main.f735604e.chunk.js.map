{"version":3,"sources":["icons3 sync /^/.//.*/.svg$","icons3/clear_sky_day.svg","icons3/clear_sky_night.svg","icons3/cloudy.svg","icons3/fog.svg","icons3/half_clear_sky_day.svg","icons3/half_clear_sky_night.svg","icons3/heavy_rain.svg","icons3/heavy_sleet.svg","icons3/light_rain.svg","icons3/light_sleet.svg","icons3/moderate_rain.svg","icons3/moderate_sleet.svg","icons3/nearly_clear_sky_day.svg","icons3/nearly_clear_sky_night.svg","icons3/overcast.svg","icons3/snow.svg","icons3/thunder.svg","icons3/unknown.svg","components/atoms/Paper/index.tsx","components/weather/WeatherCell/index.tsx","components/weather/TimeCell/index.tsx","components/weather/WeatherTable/index.tsx","components/weather/WeatherTableList/index.tsx","location/geocoder.ts","store/locationSearch/types.ts","location/geolocation.ts","store/locationSearch/actions.ts","weather/types.ts","components/location/LocationSearchItem/index.tsx","store/forecasts/types.ts","helpers/date.ts","weather/weatherProviders/abstractProvider.ts","weather/weatherProviders/MET.ts","weather/weatherProviders/SMHI.ts","weather/index.ts","store/forecasts/actions.ts","components/location/LocationSearchList/index.tsx","components/location/LocationSearch/index.tsx","components/atoms/Header/index.tsx","store/settings/types.ts","components/pages/SettingsPage/index.tsx","store/settings/actions.ts","components/pages/WeatherPage/index.tsx","App.tsx","serviceWorker.ts","helpers/cookies.ts","store/locationSearch/reducers.ts","store/forecasts/reducers.ts","store/settings/reducers.ts","store/index.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Paper","props","className","style","children","Text","Typography","connect","state","showGust","settings","showMinMaxTemp","undefined","weather","Fragment","temperatureMin","temperatureMax","strong","Math","round","type","marginLeft","marginRight","temperature","symbol","alt","src","require","default","wind","gust","precipitation","precipitationUnit","TimeCell","time","Title","WeatherTable","level","this","name","width","height","providers","ignored","index","provider","margin","overflowX","justifyContent","tableData","column","formatTime","React","Component","any","date","getHours","slice","startDate","endDate","WeatherTableList","result","getDay","pairs","i","forecast","days","length","push","isLoading","size","hours","getTableName","weatherPair","weatherDay","index2","spans","lastSearch","forecasts","selectedLocation","locationSearch","lastSearchId","startGeocode","searchTerm","listener","trimmed","trim","onSuccess","newSearchId","setTimeout","tryPerformSearch","isOutdated","searchId","fetchGeocodeData","a","process","fetch","formatData","json","locations","loc","country","lat","Number","long","ok","console","warn","statusText","onAbort","SELECT_LOCATION","SELECT_USER_LOCATION","GEOCODE_START","GEOCODE_SUCCESS","GEOCODE_FAILURE","LOCATE_USER_START","LOCATE_USER_SUCCESS","LOCATE_USER_FAILURE","startGeolocate","navigator","geolocation","getCurrentPosition","position","geocodeCoordinates","coords","error","coordinates","fetchReverseGeocode","latitude","longitude","response","onError","data","altitude","NaN","address","city","municipality","county","lon","geocodeFailure","errorMessage","locateUserSuccess","location","WeatherIcon","Item","onClick","onSelect","FORECAST_FETCH_START","FORECAST_FETCH_SUCCESS","FORECAST_FETCH_FAILURE","listHoursFromNow","count","start","Date","setHours","setMinutes","setSeconds","setMilliseconds","listDates","listDaysFromTomorrow","setDate","getDate","interval","times","getTime","AbstractProvider","onFailure","requestData","toString","fillForecast","MET","icons","clear_sky_day","cloudy","nearly_clear_sky_day","fog","heavy_rain","thunder","heavy_sleet","snow","light_rain","light_sleet","half_clear_sky_day","moderate_rain","moderate_sleet","icon","clear_sky_night","half_clear_sky_night","nearly_clear_sky_night","status","timeSeries","properties","timeseries","hoursIndex","timeSeriesIndex","timeSerie","timeSerieDate","symbol_str","next_1_hours","summary","symbol_code","details","precipitation_amount","next_6_hours","next_12_hours","split","toNight","unknown","instant","air_temperature","wind_speed","wind_speed_of_gust","day","j","span","spanLength","minTemp","maxTemp","air_temperature_min","air_temperature_max","nextTimeSerie","pThis","pNext","min","max","SMHI","value","substr","validTime","parameters","find","values","getIcon","iconDate","sumWeather","startIndex","symbolDate","totalPrecipitation","maxWind","maxGust","symbols","temp","isNaN","maxSymbolCount","maxSymbol","symbolCount","weatherProviders","newForecast","callback","createEmptyForecast","remaining","message","forEach","fetchForecast","now","createEmptyCombinedWeather","year","getUTCFullYear","month","getUTCMonth","getUTCDate","UTC","listProviderNames","combined","searchSuccess","searchFailure","fetchForecasts","dispatch","LocationSearchList","selectLocation","showUserLocation","userLocation","LocationSearchItem","onLocationSelect","locationResults","geocodeResults","LocationSearch","showUserPosition","text","searchLocations","show","setState","bordered","placeholder","autoFocus","allowClear","prefix","SearchOutlined","onChange","target","ghost","close","geocodeIsLoading","searchString","results","Header","title","backButton","backButtonName","UPDATE_THEME_MODE","UPDATE_SYSTEM_THEME","UPDATE_SETTING","SettingsPage","updateThemeMode","themeValue","theme","Group","onThemeChange","direction","checked","updateSettings","href","themeMode","setting","WeatherPage","showLocationSearch","showSettingsPage","findUserPosition","selectUserLocation","window","matchMedia","addEventListener","matches","updateSystemTheme","overflow","SettingOutlined","shape","openSettingsSearch","openLocationSearch","fontWeight","fontSize","closeLocationSearch","closeSettingsSearch","systemTheme","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","catch","setCookie","maxAge","expires","document","cookie","encodeURI","getCookie","cookies","cookieName","cookieValue","decodeURI","initialState","JSON","parse","getInitialLocation","geocodeErrorMessage","userLocationIsLoading","userLocationErrorMessage","saveLocation","stringify","THEME_MODE_COOKIE","applyTheme","DARK_CLASS","documentElement","classList","add","remove","setInitialTheme","rootReducer","combineReducers","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","createStore","applyMiddleware","thunk","ReactDOM","render","store","getElementById","URL","origin","headers","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.f735604e.chunk.js","sourcesContent":["var map = {\n\t\"./clear_sky_day.svg\": 211,\n\t\"./clear_sky_night.svg\": 212,\n\t\"./cloudy.svg\": 213,\n\t\"./fog.svg\": 214,\n\t\"./half_clear_sky_day.svg\": 215,\n\t\"./half_clear_sky_night.svg\": 216,\n\t\"./heavy_rain.svg\": 217,\n\t\"./heavy_sleet.svg\": 218,\n\t\"./light_rain.svg\": 219,\n\t\"./light_sleet.svg\": 220,\n\t\"./moderate_rain.svg\": 221,\n\t\"./moderate_sleet.svg\": 222,\n\t\"./nearly_clear_sky_day.svg\": 223,\n\t\"./nearly_clear_sky_night.svg\": 224,\n\t\"./overcast.svg\": 225,\n\t\"./snow.svg\": 226,\n\t\"./thunder.svg\": 227,\n\t\"./unknown.svg\": 228\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 210;","export default __webpack_public_path__ + \"static/media/clear_sky_day.08d2252c.svg\";","export default __webpack_public_path__ + \"static/media/clear_sky_night.fe72ba7f.svg\";","export default __webpack_public_path__ + \"static/media/cloudy.b1731609.svg\";","export default __webpack_public_path__ + \"static/media/fog.fdf19a8b.svg\";","export default __webpack_public_path__ + \"static/media/half_clear_sky_day.89d8c1b7.svg\";","export default __webpack_public_path__ + \"static/media/half_clear_sky_night.8d02af80.svg\";","export default __webpack_public_path__ + \"static/media/heavy_rain.3366fbb7.svg\";","export default __webpack_public_path__ + \"static/media/heavy_sleet.fa0fb9d8.svg\";","export default __webpack_public_path__ + \"static/media/light_rain.920a6452.svg\";","export default __webpack_public_path__ + \"static/media/light_sleet.ae8a3066.svg\";","export default __webpack_public_path__ + \"static/media/moderate_rain.2a623bba.svg\";","export default __webpack_public_path__ + \"static/media/moderate_sleet.7758da5c.svg\";","export default __webpack_public_path__ + \"static/media/nearly_clear_sky_day.36e650c9.svg\";","export default __webpack_public_path__ + \"static/media/nearly_clear_sky_night.5d46915e.svg\";","export default __webpack_public_path__ + \"static/media/overcast.a2822c8c.svg\";","export default __webpack_public_path__ + \"static/media/snow.9758315a.svg\";","export default __webpack_public_path__ + \"static/media/thunder.31fc6f06.svg\";","export default __webpack_public_path__ + \"static/media/unknown.791c8f32.svg\";","import React from \"react\";\nimport CSS from 'csstype'\n\nimport './style.css';\n\ninterface Props {\n    style?: CSS.Properties,\n    children?: React.ReactNode\n}\n\nconst Paper = (props: Props) => (\n    <div className=\"paper\" style={props.style}>\n        {props.children}\n    </div>\n);\n\nexport default Paper;","import React from \"react\";\nimport { Typography } from \"antd\";\n\nimport './style.css';\nimport { IWeather } from \"../../../weather/types\";\nimport { AppState } from \"../../../store\";\nimport { connect } from \"react-redux\";\n\nconst { Text } = Typography;\n\ninterface Props {\n    weather: IWeather,\n    showGust: boolean,\n    showMinMaxTemp: boolean,\n}\n\nconst WeatherCell = (props: Props) => (\n    <div className=\"weather_cell\">\n        {props.weather !== undefined &&\n            <React.Fragment>\n                {props.showMinMaxTemp && props.weather.temperatureMin && props.weather.temperatureMax ?\n                    <div>\n                        <Text strong className=\"minimum\">{Math.round(props.weather.temperatureMin)}</Text>\n                        <Text type=\"secondary\" style={{ marginLeft: \"1px\", marginRight: \"1px\" }}>/</Text>\n                        <Text strong className=\"maximum\">{Math.round(props.weather.temperatureMax)}</Text>\n                        <Text strong> °C</Text>\n                    </div>\n                    :\n                    <Text strong>{Math.round(props.weather.temperature)} °C</Text>\n                }\n                {props.weather.symbol &&\n                    <img className='weather_symbol' alt=\"\" /* TODO: Add alt prop! */ src={require(\"../../../icons3/\" + props.weather.symbol + \".svg\").default} />\n                }\n                <div>\n                    <div>\n                        <Text type=\"secondary\">{Math.round(props.weather.wind)}</Text>\n                        {props.showGust && props.weather.gust &&\n                            <Text className=\"maximum\" type=\"secondary\" style={{ marginLeft: \"1px\", marginRight: \"1px\" }}>{\"(\" + Math.round(props.weather.gust) + \")\"}</Text>\n                        }\n                        <Text type=\"secondary\">{\"m/s\"}</Text>\n                    </div>\n\n                    <Text type=\"secondary\"> {props.weather.precipitation + \" \" + props.weather.precipitationUnit}</Text>\n                </div>\n            </React.Fragment>\n        }\n    </div>\n);\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        showGust: state.settings.showGust,\n        showMinMaxTemp: state.settings.showMinMaxTemp,\n    }\n}\n\nexport default connect(mapStateToProps)(WeatherCell);","import React from \"react\";\nimport { Typography } from \"antd\";\n\nimport './style.css';\n\nconst { Text } = Typography;\n\ninterface Props {\n    time: string\n}\n\nconst TimeCell = (props: Props) => (\n    <div className=\"time_cell\">\n        <Text strong>{props.time}</Text>\n    </div>\n);\n\nexport default TimeCell;","import React from \"react\";\nimport Paper from \"../../atoms/Paper\";\nimport WeatherCell from \"../WeatherCell\";\nimport { Divider, Typography } from \"antd\";\nimport TimeCell from \"../TimeCell\";\nimport { IWeatherPoint, IWeatherSpan } from \"../../../weather/types\";\nimport './style.css';\n\nconst { Title } = Typography;\n\ninterface IWeatherTableListProps {\n    tableData: IWeatherSpan[] | IWeatherPoint[],\n    providers: string[],\n    name: string,\n}\n\nclass WeatherTable extends React.Component<IWeatherTableListProps> {\n    public render() {\n        return (\n            <div>\n                <Title level={4}>{this.props.name}</Title>\n                <div className=\"columns\">\n\n                    {/* Time row background */}\n                    <div className=\"right-column\">\n                        <div className=\"time-row\" style={{ width: '100%' }}>\n                            <Paper style={{ width: '100%', height: '100%' }} />\n                        </div>\n                    </div>\n\n                    {/* Weather row background. One for each provider. */}\n                    <div className=\"all-columns\">\n                        <div className=\"time-row\" />\n                        {this.props.providers.map((ignored, index) =>\n                            <div key={index} className=\"weather-row\">\n                                <Paper style={{ width: '100%', height: '100%' }} />\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Provider Name */}\n                    <div className=\"left-column\">\n                        <div className=\"time-row\" />\n                        {this.props.providers.map((provider, index) =>\n                            <div key={index} className=\"weather-row\">\n                                <Typography className=\"weather-provider-name\">\n                                    {provider}\n                                </Typography>\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Divider */}\n                    <div className=\"divider-column\">\n                        <div className=\"time-row\" />\n                        {this.props.providers.map((ignored, index) =>\n                            <div key={index} className=\"weather-row\">\n                                <Divider type=\"vertical\" style={{ height: 'calc(100% - 5px)', margin: 0 }} />\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Time cells and Weather cells */}\n                    <div className=\"right-column\" style={{ overflowX: 'auto' }}>\n                        <div className=\"time-row\" style={{ justifyContent: \"space-around\" }}>\n                            {this.props.tableData.map((column: any, index) =>\n                                <TimeCell key={index} time={formatTime(column)} />\n                            )}\n                        </div>\n                        {this.props.providers.map((provider, index) =>\n                            <div key={index} className=\"weather-row\" style={{ justifyContent: \"space-around\" }}>\n                                {this.props.tableData.map((column, index) =>\n                                    <WeatherCell key={index} weather={column.weather[provider]} />\n                                )}\n                            </div>\n                        )}\n                    </div>\n                </div >\n            </div>\n        );\n    }\n}\n\nfunction formatTime(column: IWeatherPoint | IWeatherSpan): string {\n    const any: any = column;\n    if (any.date) {\n        return ('0' + any.date.getHours()).slice(-2);\n    }\n    else if (any.startDate && any.endDate) {\n        return ('0' + any.startDate.getHours()).slice(-2) + \"—\" + ('0' + any.endDate.getHours()).slice(-2);\n    }\n\n    return \"\";\n}\n\nexport default WeatherTable;","import React from \"react\";\nimport './style.css';\nimport WeatherTable from \"../WeatherTable\";\nimport { Spin, Typography } from \"antd\";\nimport { AppState } from \"../../../store\";\nimport { connect } from \"react-redux\";\nimport { ILocation } from \"../../../location/types\";\nimport { IWeatherDay, IWeatherForecast } from \"../../../weather/types\";\n\nconst { Title } = Typography;\n\ninterface IWeatherTableListProps {\n    forecast: IWeatherForecast,\n    isLoading: boolean,\n    selectedLocation?: ILocation,\n}\n\nclass WeatherTableList extends React.Component<IWeatherTableListProps> {\n    private getTableName(index: number, date: Date | undefined): string {\n        let result = \"\";\n\n        if (!date) return result;\n\n        if (index === 0) {\n            result = \"Idag, \";\n        } else {\n            result = \"\";\n        }\n\n        switch (date.getDay()) {\n            case 1:\n                result += \"Måndag\";\n                break;\n            case 2:\n                result += \"Tisdag\";\n                break;\n            case 3:\n                result += \"Onsdag\";\n                break;\n            case 4:\n                result += \"Torsdag\";\n                break;\n            case 5:\n                result += \"Fredag\";\n                break;\n            case 6:\n                result += \"Lördag\";\n                break;\n            case 0:\n                result += \"Söndag\";\n                break;\n        }\n\n        return result;\n    }\n\n    public render() {\n        let pairs: IWeatherDay[][] = [];\n        for (let i = 0; i < this.props.forecast.days.length - 1; i += 2) {\n            pairs.push([this.props.forecast.days[i], this.props.forecast.days[i + 1]]);\n        }\n\n        return (\n            <div className=\"list\">\n                {this.props.isLoading ?\n                    <Spin className=\"spin\" size=\"large\" />\n                    :\n                    <div className=\"items\">\n                        <WeatherTable tableData={this.props.forecast.hours} providers={this.props.forecast.providers} name={this.getTableName(0, this.props.forecast.hours[0].date)} />\n                        {pairs.map((weatherPair, index) =>\n                            <div className=\"weather-table-pair\" key={index}>\n                                {weatherPair.map((weatherDay, index2) =>\n                                    <WeatherTable\n                                        key={index2}\n                                        tableData={weatherDay.spans}\n                                        providers={this.props.forecast.providers}\n                                        name={this.getTableName(index + index2 + 1, weatherDay.spans[0].startDate)}\n                                    />\n                                )}\n                            </div>\n                        )}\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        forecast: state.forecasts.forecast,\n        isLoading: state.forecasts.isLoading,\n        selectedLocation: state.locationSearch.selectedLocation,\n    }\n}\n\nexport default connect(mapStateToProps)(WeatherTableList);\n","import { ILocation, IGeocodeListener } from \"./types\";\n\nlet lastSearch: string;\nlet lastSearchId: number = 0;\n\n// The minimum delay between requests to the api\nconst MIN_SEARCH_DELAY: number = 500;\n\n\n/**\n * Starts a new geocode search. The result will be returned to the listener.\n */\nexport function startGeocode(searchTerm: string, listener: IGeocodeListener): void {\n    const trimmed = searchTerm.trim()\n    if (trimmed === lastSearch) {\n        return;\n    }\n\n    lastSearch = trimmed;\n\n    if (trimmed === \"\") {\n        // Don't do an actual search if there is no search term\n        listener.onSuccess([]);\n        lastSearchId++;\n        return;\n    }\n\n    lastSearchId++;\n    let newSearchId = lastSearchId;\n\n    setTimeout(() => tryPerformSearch(newSearchId, trimmed, listener), MIN_SEARCH_DELAY);\n}\n\n\n/**\n * Returns true if the given search id is outdated.\n */\nfunction isOutdated(searchId: number): boolean {\n    return searchId !== lastSearchId;\n}\n\n\n/**\n * Fetches data from geocode api.\n */\nasync function fetchGeocodeData(searchTerm: string): Promise<Response> {\n    const key = process.env.REACT_APP_LOCATIONIQ;\n    const address = \"https://api.locationiq.com/v1/autocomplete.php\";\n\n    return fetch(`${address}?key=${key}&q=${searchTerm}&viewbox=3,44,32,71&limit=20&dedupe=1&accept-language=sv`);//&accept-language=native');\n}\n\n\n/**\n * Formats the json data from the geocode api.\n */\nfunction formatData(json: any): ILocation[] {\n    const locations: ILocation[] = []\n\n    for (const loc of json) {\n        locations.push({\n            country: loc['display_address'],\n            name: loc['display_place'],\n            lat: Number(loc['lat']),\n            long: Number(loc['lon']),\n            alt: 0,\n        });\n    }\n\n    return locations\n}\n\n\n/**\n * Tries to perform a search, but cancels if the search becomes outdated.\n */\nasync function tryPerformSearch(searchId: number, searchTerm: string, listener: IGeocodeListener) {\n    if (isOutdated(searchId)) {\n        return;\n    }\n\n    const result = await fetchGeocodeData(searchTerm);\n\n    if (isOutdated(searchId)) {\n        return;\n    }\n\n    const json = await result.json();\n\n    if (isOutdated(searchId)) {\n        return;\n    }\n\n    if (result.ok) {\n        const locations = formatData(json);\n        listener.onSuccess(locations);\n    }\n    // Returns this with a 404 status when no location found.\n    else if ( json['error'] === \"Unable to geocode\" ) {\n        const locations: ILocation[] = [];\n        listener.onSuccess(locations);\n    }\n    else {\n        // TODO: Remove console warn\n        console.warn('Geocode response error!', result.statusText);\n        listener.onAbort();\n    }\n}\n","import { ILocation } from \"../../location/types\";\n\nexport interface ILocationSearchState {\n    selectedLocation: ILocation,\n\n    geocodeResults: ILocation[],\n    geocodeIsLoading: boolean,\n    geocodeErrorMessage: string,\n\n    userLocation?: ILocation,\n    userLocationIsLoading: boolean,\n    userLocationErrorMessage: string,\n}\n\n// Select location\n\nexport const SELECT_LOCATION = 'SELECT_LOCATION';\n\ninterface ISelectLocationAction {\n    type: typeof SELECT_LOCATION,\n    location: ILocation\n}\n\nexport const SELECT_USER_LOCATION = \"SELECT_USER_LOCATION\";\n\ninterface ISelectUserLocation {\n    type: typeof SELECT_USER_LOCATION,\n}\n\n// Geocode\n\nexport const GEOCODE_START = 'GEOCODE_START';\n\ninterface IGeocodeStartAction {\n    type: typeof GEOCODE_START,\n}\n\nexport const GEOCODE_SUCCESS = 'GEOCODE_SUCCESS';\n\ninterface IGeocodeSuccessAction {\n    type: typeof GEOCODE_SUCCESS,\n    results: ILocation[]\n}\n\nexport const GEOCODE_FAILURE = 'GEOCODE_FAILURE';\n\ninterface IGeocodeFailureAction {\n    type: typeof GEOCODE_FAILURE,\n    errorMessage: string\n}\n\n// Locate user\n\nexport const LOCATE_USER_START = 'LOCATE_USER_START';\n\ninterface ILocateUserStartAction {\n    type: typeof LOCATE_USER_START,\n}\n\nexport const LOCATE_USER_SUCCESS = 'LOCATE_USER_SUCCESS';\n\ninterface ILocateUserSuccessAction {\n    type: typeof LOCATE_USER_SUCCESS,\n    location: ILocation\n}\n\nexport const LOCATE_USER_FAILURE = 'LOCATE_USER_FAILURE';\n\ninterface ILocateUserFailureAction {\n    type: typeof LOCATE_USER_FAILURE,\n    errorMessage: string\n}\n\n// Types\n\nexport type LocationActionTypes = ISelectLocationAction | ISelectUserLocation | IGeocodeStartAction | IGeocodeSuccessAction | IGeocodeFailureAction | ILocateUserStartAction | ILocateUserSuccessAction | ILocateUserFailureAction;","\nimport { ILocation, IUserPositionListener } from \"./types\";\n\n/**\n * Tries to find the users position and returns it to the listener.\n */\nexport function startGeolocate(listener: IUserPositionListener) {\n    const successCallback: PositionCallback = (position) => geocodeCoordinates(position.coords, listener);\n\n    const errorCallback: PositionErrorCallback = (error) => {\n        // TODO\n    };\n\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n}\n\n/**\n * Converts coordinates to a location\n */\nasync function geocodeCoordinates(coordinates: GeolocationCoordinates, listener: IUserPositionListener) {\n    const response = await fetchReverseGeocode(coordinates.latitude, coordinates.longitude);\n\n    if (!response.ok) {\n        listener.onError();\n        return;\n    }\n\n    const json = await response.json();\n\n    let data = formatData(json);\n    // Geocoder does not have altitude so use user position.\n    data.alt = coordinates.altitude || NaN;\n\n    listener.onSuccess(data)\n}\n\n/**\n * Fetches data from reverse geocoding api.\n */\nasync function fetchReverseGeocode(latitude: number, longitude: number): Promise<Response> {\n    const key = process.env.REACT_APP_LOCATIONIQ;\n    const address = \"https://eu1.locationiq.com/v1/reverse.php\";\n\n    return fetch(`${address}?key=${key}&lat=${latitude}&lon=${longitude}&format=json&accept-language=sv`);\n}\n\n/**\n * Formats the json data from the reverse geocoding api.\n */\nfunction formatData(json: any): ILocation {\n    return {\n        country: \"Från din position\",\n        name: json.address.city || json.address.municipality || json.address.county || json.address.country,\n        lat: json.lat,\n        long: json.lon,\n        alt: NaN,\n    }\n}\n","import { Dispatch } from 'redux';\nimport { IGeocodeListener, ILocation, IUserPositionListener as ILocateUserListener } from '../../location/types';\nimport { startGeocode } from '../../location/geocoder';\nimport { GEOCODE_FAILURE, GEOCODE_START, GEOCODE_SUCCESS, LOCATE_USER_FAILURE, LOCATE_USER_START, LOCATE_USER_SUCCESS, LocationActionTypes, SELECT_LOCATION, SELECT_USER_LOCATION } from './types';\nimport { startGeolocate } from '../../location/geolocation';\n\n\nexport function selectLocation(location: ILocation) {\n    return {\n        type: SELECT_LOCATION,\n        location: location,\n    }\n}\n\nexport function selectUserLocation() {\n    return {\n        type: SELECT_USER_LOCATION,\n    }\n}\n\nexport const geocode = (searchString: string) => async (dispatch: Dispatch) => {\n    const onSuccess = (locations: ILocation[]) => dispatch(geocodeSuccess(locations));\n    const onFailure = () => dispatch(geocodeFailure(\"\")); // TODO: Error message\n\n    const listener: IGeocodeListener = {\n        onSuccess: onSuccess,\n        onAbort: onFailure,\n    }\n\n    dispatch(geocodeStart());\n\n    startGeocode(searchString, listener);\n}\n\nexport const requestUserPosition = (callback?: (location: ILocation) => void) => async (dispatch: Dispatch) => {\n    const onSuccess = (location: ILocation) => {\n        dispatch(locateUserSuccess(location));\n        if (callback)\n            callback(location);\n    };\n    const onError = () => dispatch(geocodeFailure(\"\")); // TODO: Error message\n\n    const listener: ILocateUserListener = {\n        onSuccess: onSuccess,\n        onError: onError,\n    }\n\n    dispatch(locateUserStart());\n\n    startGeolocate(listener)\n}\n\nfunction geocodeStart(): LocationActionTypes {\n    return {\n        type: GEOCODE_START,\n    };\n}\n\nfunction geocodeSuccess(results: ILocation[]): LocationActionTypes {\n    return {\n        type: GEOCODE_SUCCESS,\n        results: results\n    }\n}\n\nfunction geocodeFailure(errorMessage: string): LocationActionTypes {\n    return {\n        type: GEOCODE_FAILURE,\n        errorMessage: errorMessage\n    }\n}\n\nfunction locateUserStart(): LocationActionTypes {\n    return {\n        type: LOCATE_USER_START,\n    };\n}\n\nfunction locateUserSuccess(location: ILocation): LocationActionTypes {\n    return {\n        type: LOCATE_USER_SUCCESS,\n        location: location\n    }\n}\n\nfunction locateUserFailure(errorMessage: string): LocationActionTypes {\n    return {\n        type: LOCATE_USER_FAILURE,\n        errorMessage: errorMessage\n    }\n}","import { ILocation } from \"../location/types\";\n\nexport interface IWeatherForecast {\n    hours: IWeatherPoint[],\n    days: IWeatherDay[],\n    providers: string[],\n    location: ILocation,\n}\n\nexport interface IWeatherPoint {\n    date: Date,\n    weather: ICombinedWeather,\n}\n\nexport interface IWeatherDay {\n    spans: IWeatherSpan[],\n}\n\nexport interface IWeatherSpan {\n    startDate: Date,\n    endDate: Date,\n    weather: ICombinedWeather\n}\n\nexport interface ICombinedWeather {\n    [key: string]: IWeather,\n}\n\nexport interface IWeather {\n    temperature: number,\n    temperatureMin: number,\n    temperatureMax: number,\n    wind: number,\n    gust: number,\n    precipitation: number,\n    precipitationUnit: string,\n    symbol: WeatherIcon,\n}\n\nexport enum WeatherIcon {\n    unknown = \"unknown\",\n    // Cloudiness\n    clear_sky_day = \"clear_sky_day\",\n    clear_sky_night = \"clear_sky_night\",\n    nearly_clear_sky_day = \"nearly_clear_sky_day\",\n    nearly_clear_sky_night = \"nearly_clear_sky_night\",\n    half_clear_sky_day = \"half_clear_sky_day\",\n    half_clear_sky_night = \"half_clear_sky_night\",\n    cloudy = \"cloudy\",\n    // Rain\n    light_rain = \"light_rain\",\n    moderate_rain = \"moderate_rain\",\n    heavy_rain = \"heavy_rain\",\n    // Sleet\n    light_sleet = \"light_sleet\",\n    moderate_sleet = \"moderate_sleet\",\n    heavy_sleet = \"heavy_sleet\",\n    // Other\n    snow = \"snow\",\n    thunder = \"thunder\",\n    fog = \"fog\",\n}","import { Typography } from \"antd\";\nimport { ILocation } from \"../../../location/types\";\nimport './style.css';\n\nconst { Text } = Typography;\n\ninterface Props {\n    location: ILocation,\n    onSelect: (location: ILocation) => void,\n}\n\nconst Item = (props: Props) => (\n    <button className=\"location-list-item\" onClick={() => props.onSelect(props.location)}>\n        <Text strong>{props.location.name}</Text>\n        <Text type=\"secondary\">{props.location.country}</Text>\n    </button>\n);\n\nexport default Item;","import { IWeatherForecast } from \"../../weather/types\";\n\nexport interface IWeatherState {\n    forecast: IWeatherForecast,\n    isLoading: boolean\n    errorMessage?: string,\n}\n\nexport const FORECAST_FETCH_START = 'FORECAST_FETCH_START';\n\ninterface IFetchStartAction {\n    type: typeof FORECAST_FETCH_START,\n}\n\nexport const FORECAST_FETCH_SUCCESS = 'FORECAST_FETCH_SUCCESS';\n\ninterface IFetchSuccessAction {\n    type: typeof FORECAST_FETCH_SUCCESS,\n    forecast: IWeatherForecast,\n}\n\nexport const FORECAST_FETCH_FAILURE = 'FORECAST_FETCH_FAILURE';\n\ninterface IFetchFailureAction {\n    type: typeof FORECAST_FETCH_FAILURE,\n    errorMessage: string,\n}\n\nexport type ForecastActionTypes = IFetchStartAction | IFetchSuccessAction | IFetchFailureAction;","/**\n * Returns a list of Date objects with one hour difference, starting with the current hour.\n * @param count The number of Date objects to return.\n */\nexport function listHoursFromNow(count: number): Date[] {\n    let start = new Date();\n    start.setHours(start.getHours() + 1);\n    start.setMinutes(0);\n    start.setSeconds(0);\n    start.setMilliseconds(0);\n    return listDates(start, 3600000, count);\n}\n\n/**\n * Returns a list of Date objects with one day difference, starting with the next day.\n * @param count The number of Date objects to return.\n */\nexport function listDaysFromTomorrow(count: number): Date[] {\n    let start = new Date();\n    start.setDate(start.getDate() + 1);\n    return listDates(start, 86400000, count);\n}\n\n/**\n * Returns an array of Date objects.\n * @param start The first date in the array.\n * @param interval The time difference in milliseconds.\n * @param count The number of Date objects to return.\n */\nexport function listDates(start: Date, interval: number, count: number): Date[] {\n    let times: Date[] = []\n\n    for (let i = 0; i < count; i++) {\n        times.push(new Date(start.getTime() + (i * interval)));\n    }\n\n    return times;\n}\n\n/**\n * Returns the number of days from today to the given date.\n */\nexport function getDayOffset(date: Date) {\n    let today = new Date();\n    today.setHours(0);\n    today.setMinutes(0);\n    today.setSeconds(0);\n    today.setMilliseconds(0);\n\n    let diff = date.getTime() - today.getTime();\n\n    return Math.floor(diff / 86400000);  // 86400000 milliseconds in a day)\n}","import { ILocation } from \"../../location/types\";\nimport { IWeatherForecast } from \"../types\";\n\nexport default abstract class AbstractProvider {\n    name: string;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    public async fetchForecast(forecast: IWeatherForecast, location: ILocation, onSuccess: () => any, onFailure: (error: Error) => any) {\n        try {\n            // Send a request\n            let response = await this.requestData(location.lat.toString(), location.long.toString());\n\n            const json = await response.json();\n\n            // Format the response \n            await this.fillForecast(json, forecast);\n\n        } catch (e: any) {\n            console.error(e)\n            onFailure(e);\n            return;\n        }\n\n        onSuccess()\n    }\n\n    protected abstract requestData(lat: string, long: string): Promise<Response>;\n    protected abstract fillForecast(json: any, forecast: IWeatherForecast): void;\n}","import { IWeatherForecast, WeatherIcon } from \"../types\";\nimport AbstractProvider from \"./abstractProvider\";\n\n\nexport default class MET extends AbstractProvider {\n    constructor() {\n        super(\"Yr\")\n    }\n\n    // Icon list: https://api.met.no/weatherapi/weathericon/2.0/documentation\n    private icons: any = {\n        \"clearsky\": WeatherIcon.clear_sky_day,\n        \"cloudy\": WeatherIcon.cloudy,\n        \"fair\": WeatherIcon.nearly_clear_sky_day,\n        \"fog\": WeatherIcon.fog,\n        \"heavyrain\": WeatherIcon.heavy_rain,\n        \"heavyrainandthunder\": WeatherIcon.thunder,\n        \"heavyrainshowers\": WeatherIcon.heavy_rain,\n        \"heavyrainshowersandthunder\": WeatherIcon.thunder,\n        \"heavysleet\": WeatherIcon.heavy_sleet,\n        \"heavysleetandthunder\": WeatherIcon.thunder,\n        \"heavysleetshowers\": WeatherIcon.heavy_sleet,\n        \"heavysleetshowersandthunder\": WeatherIcon.thunder,\n        \"heavysnow\": WeatherIcon.snow,\n        \"heavysnowandthunder\": WeatherIcon.thunder,\n        \"heavysnowshowers\": WeatherIcon.snow,\n        \"heavysnowshowersandthunder\": WeatherIcon.thunder,\n        \"lightrain\": WeatherIcon.light_rain,\n        \"lightrainandthunder\": WeatherIcon.thunder,\n        \"lightrainshowers\": WeatherIcon.light_rain,\n        \"lightrainshowersandthunder\": WeatherIcon.thunder,\n        \"lightsleet\": WeatherIcon.light_sleet,\n        \"lightsleetandthunder\": WeatherIcon.thunder,\n        \"lightsleetshowers\": WeatherIcon.light_sleet,\n        \"lightsnow\": WeatherIcon.snow,\n        \"lightsnowandthunder\": WeatherIcon.thunder,\n        \"lightsnowshowers\": WeatherIcon.snow,\n        \"lightssleetshowersandthunder\": WeatherIcon.thunder,\n        \"lightssnowshowersandthunder\": WeatherIcon.thunder,\n        \"partlycloudy\": WeatherIcon.half_clear_sky_day,\n        \"rain\": WeatherIcon.moderate_rain,\n        \"rainandthunder\": WeatherIcon.thunder,\n        \"rainshowers\": WeatherIcon.moderate_rain,\n        \"rainshowersandthunder\": WeatherIcon.thunder,\n        \"sleet\": WeatherIcon.moderate_sleet,\n        \"sleetandthunder\": WeatherIcon.thunder,\n        \"sleetshowers\": WeatherIcon.moderate_sleet,\n        \"sleetshowersandthunder\": WeatherIcon.thunder,\n        \"snow\": WeatherIcon.snow,\n        \"snowandthunder\": WeatherIcon.thunder,\n        \"snowshowers\": WeatherIcon.snow,\n        \"snowshowersandthunder\": WeatherIcon.thunder,\n    }\n\n    private toNight(icon: WeatherIcon, date: Date): WeatherIcon {\n        const hours = date.getHours();\n        if (hours > 15 || hours < 8) {\n            switch (icon) {\n                case WeatherIcon.clear_sky_day:\n                    return WeatherIcon.clear_sky_night;\n                case WeatherIcon.half_clear_sky_day:\n                    return WeatherIcon.half_clear_sky_night;\n                case WeatherIcon.nearly_clear_sky_day:\n                    return WeatherIcon.nearly_clear_sky_night;\n            }\n        }\n        return icon;\n    }\n\n    protected async requestData(lat: string, long: string): Promise<Response> {\n        const result = await fetch('https://api.met.no/weatherapi/locationforecast/2.0/complete?lat='\n            + lat + '&lon=' + long);\n\n        if (!result.ok) {\n            throw new Error(\"Weather response error! status: \" + result.status)\n        }\n\n        return result;\n    }\n\n    protected fillForecast(json: any, forecast: IWeatherForecast): void {\n        const timeSeries: any[] = json.properties.timeseries;\n\n        // --- Fill hours ---\n        let hoursIndex = 0;\n        let timeSeriesIndex = 0;\n        while (hoursIndex < forecast.hours.length && timeSeriesIndex < timeSeries.length) {\n            const timeSerie: any = timeSeries[timeSeriesIndex];\n            const timeSerieDate: Date = new Date(timeSerie.time);\n\n            // If this time serie is to old\n            if (forecast.hours[hoursIndex].date < timeSerieDate) {\n                hoursIndex++;\n                continue;\n            }\n            // If this time serie is not old enough\n            if (forecast.hours[hoursIndex].date > timeSerieDate) {\n                timeSeriesIndex++;\n                continue;\n            }\n\n            let weather = forecast.hours[hoursIndex].weather[this.name];\n\n            let symbol_str: string;\n            let precipitation: number;\n            if (timeSerie.data.next_1_hours) {\n                symbol_str = timeSerie.data.next_1_hours.summary.symbol_code;\n                precipitation = timeSerie.data.next_1_hours.details.precipitation_amount;\n            }\n            else if (timeSerie.data.next_6_hours) {\n                symbol_str = timeSerie.data.next_6_hours.summary.symbol_code;\n                precipitation = timeSerie.data.next_6_hours.details.precipitation_amount;\n            }\n            else if (timeSerie.data.next_12_hours) {\n                symbol_str = timeSerie.data.next_12_hours.summary.symbol_code;\n                precipitation = timeSerie.data.next_12_hours.details.precipitation_amount;\n            }\n            else {\n                continue;\n            }\n\n            // Remove _day or _night\n            symbol_str = symbol_str.split(\"_\")[0];\n\n            const symbol = this.toNight(this.icons[symbol_str] || WeatherIcon.unknown, timeSerieDate);\n            if (symbol === WeatherIcon.unknown) {\n                console.warn(\"Unknown symbol\", symbol_str)\n            }\n\n            weather.temperature = timeSerie.data.instant.details.air_temperature;\n            weather.wind = timeSerie.data.instant.details.wind_speed;\n            weather.gust = timeSerie.data.instant.details.wind_speed_of_gust;\n            weather.precipitation = precipitation;\n            weather.precipitationUnit = \"mm\";\n            weather.symbol = symbol;\n\n            timeSeriesIndex++;\n            hoursIndex++;\n        }\n\n        // --- Fill days ---\n        timeSeriesIndex = 0;\n        for (let i = 0; i < forecast.days.length; i++) {\n            const day = forecast.days[i];\n            for (let j = 0; j < day.spans.length; j++) {\n\n                if (timeSeriesIndex >= timeSeries.length) {\n                    break;\n                }\n\n                const span = day.spans[j];\n                const timeSerie = timeSeries[timeSeriesIndex];\n                const timeSerieDate: Date = new Date(timeSerie.time);\n\n                // If this time serie is to old\n                if (span.startDate < timeSerieDate) {\n                    continue;\n                }\n                // If this time serie is not old enough\n                if (span.startDate > timeSerieDate) {\n                    timeSeriesIndex++;\n                    j--;\n                    continue;\n                }\n\n                let weather = span.weather[this.name];\n\n                // Get span length in hours\n                const spanLength = (span.endDate.getTime() - span.startDate.getTime()) / (1000 * 60 * 60);\n\n                let symbol_str: string;\n                let precipitation: number;\n                let minTemp: number;\n                let maxTemp: number;\n                if (spanLength === 6) {\n                    symbol_str = timeSerie.data.next_6_hours.summary.symbol_code;\n                    precipitation = timeSerie.data.next_6_hours.details.precipitation_amount;\n                    minTemp = timeSerie.data.next_6_hours.details.air_temperature_min;\n                    maxTemp = timeSerie.data.next_6_hours.details.air_temperature_max;\n                }\n                else if (spanLength === 12) {\n                    const nextTimeSerie = timeSeries[timeSeriesIndex + 1];\n\n                    symbol_str = timeSerie.data.next_12_hours.summary.symbol_code;\n\n                    const pThis = timeSerie.data.next_6_hours.details.precipitation_amount;\n                    const pNext = nextTimeSerie.data.next_6_hours.details.precipitation_amount;\n\n                    precipitation = Math.round(10 * ((pThis + pNext) / 12)) / 10;\n\n                    minTemp = Math.min(timeSerie.data.next_6_hours.details.air_temperature_min, nextTimeSerie.data.next_6_hours.details.air_temperature_min);\n                    maxTemp = Math.max(timeSerie.data.next_6_hours.details.air_temperature_max, nextTimeSerie.data.next_6_hours.details.air_temperature_max);\n                }\n                else {\n                    console.warn(\"Unknown span length\", spanLength)\n                    timeSeriesIndex++;\n                    continue;\n                }\n\n                // Remove _day or _night\n                symbol_str = symbol_str.split(\"_\")[0];\n\n                const symbol = this.toNight(this.icons[symbol_str] || WeatherIcon.unknown, timeSerieDate);\n                if (symbol === WeatherIcon.unknown) {\n                    console.warn(\"Unknown symbol\", symbol_str)\n                }\n\n                weather.temperature = (maxTemp + minTemp) / 2;\n                weather.temperatureMax = maxTemp;\n                weather.temperatureMin = minTemp;\n                weather.wind = timeSerie.data.instant.details.wind_speed; // TODO: Find max wind speed\n                weather.gust = timeSerie.data.instant.details.wind_speed_of_gust; // TODO: Find max gust speed\n                weather.precipitation = precipitation;\n                weather.precipitationUnit = \"mm/h\";\n                weather.symbol = symbol;\n\n                timeSeriesIndex++;\n            }\n        }\n    }\n}","import { IWeather, IWeatherForecast, WeatherIcon } from \"../types\";\nimport AbstractProvider from \"./abstractProvider\";\n\n\nexport default class SMHI extends AbstractProvider {\n    constructor() {\n        super(\"SMHI\")\n    }\n\n    // Weather parameter descriptions can be found at:\n    // https://opendata.smhi.se/apidocs/metfcst/parameters.html#parameter-table\n    private icons = {\n        1: WeatherIcon.clear_sky_day,        // Clear sky\n        2: WeatherIcon.nearly_clear_sky_day, // Nearly clear sky\n        3: WeatherIcon.half_clear_sky_day,   // Variable cloudiness\n        4: WeatherIcon.half_clear_sky_day,   // Half clear sky\n        5: WeatherIcon.cloudy,               // Cloudy sky\n        6: WeatherIcon.cloudy,               // Overcast\n        7: WeatherIcon.fog,                  // Fog\n        8: WeatherIcon.light_rain,           // Light rain showers\n        9: WeatherIcon.moderate_rain,        // Moderate rain showers\n        10: WeatherIcon.heavy_rain,          // Heavy rain showers\n        11: WeatherIcon.thunder,             // Thunderstorm\n        12: WeatherIcon.light_sleet,         // Light sleet showers\n        13: WeatherIcon.moderate_sleet,      // Moderate sleet showers\n        14: WeatherIcon.heavy_sleet,         // Heavy sleet showers\n        15: WeatherIcon.snow,                // Light snow showers\n        16: WeatherIcon.snow,                // Moderate snow showers\n        17: WeatherIcon.snow,                // Heavy snow showers\n        18: WeatherIcon.light_rain,          // Light rain\n        19: WeatherIcon.moderate_rain,       // Moderate rain\n        20: WeatherIcon.heavy_rain,          // Heavy rain\n        21: WeatherIcon.thunder,             // Thunder\n        22: WeatherIcon.light_sleet,         // Light sleet\n        23: WeatherIcon.moderate_sleet,      // Moderate sleet\n        24: WeatherIcon.heavy_sleet,         // Heavy sleet\n        25: WeatherIcon.snow,                // Light snowfall\n        26: WeatherIcon.snow,                // Moderate snowfall\n        27: WeatherIcon.snow,                // Heavy snowfall\n    }\n\n    private getIcon(value: never, date: Date): WeatherIcon {\n        let icon = this.icons[value];\n        if (!icon) {\n            console.warn(\"Unknown symbol value\", value)\n            return WeatherIcon.unknown;\n        }\n\n        const hours = date.getHours();\n        if (hours > 15 || hours < 8) {\n            switch (icon) {\n                case WeatherIcon.clear_sky_day:\n                    return WeatherIcon.clear_sky_night;\n                case WeatherIcon.half_clear_sky_day:\n                    return WeatherIcon.half_clear_sky_night;\n                case WeatherIcon.nearly_clear_sky_day:\n                    return WeatherIcon.nearly_clear_sky_night;\n            }\n        }\n\n        return icon;\n    }\n\n    protected async requestData(lat: string, long: string): Promise<Response> {\n        const max = 9; // the maximum precision allowed by the api (including decimal point)\n        const result = await fetch('https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/'\n            + long.substr(0, max) + '/lat/' + lat.substr(0, max) + '/data.json');\n\n        if (!result.ok) {\n            throw new Error(\"Weather response error! status: ' + result.status\")\n        }\n\n        return result;\n    }\n\n    protected fillForecast(json: any, forecast: IWeatherForecast): void {\n        const timeSeries: [] = json['timeSeries'];\n\n        // --- Fill hours ---\n        let hoursIndex = 0;\n        let timeSeriesIndex = 0;\n        while (hoursIndex < forecast.hours.length && timeSeriesIndex < timeSeries.length) {\n            const timeSerie: any = timeSeries[timeSeriesIndex];\n            const timeSerieDate = new Date(timeSerie.validTime);\n\n            // If this time serie is to old\n            if (forecast.hours[hoursIndex].date < timeSerieDate) {\n                hoursIndex++;\n                continue;\n            }\n            // If this time serie is not old enough\n            if (forecast.hours[hoursIndex].date > timeSerieDate) {\n                timeSeriesIndex++;\n                continue;\n            }\n\n            const parameters: any[] = timeSerie.parameters;\n\n            let weather = forecast.hours[hoursIndex].weather[this.name];\n\n            //fillSingleWeather(parameters, weather);\n\n            weather.temperature = parameters.find(e => e.name === \"t\").values[0];\n            weather.precipitation = parameters.find(e => e.name === \"pmean\").values[0];\n            weather.precipitationUnit = \"mm\";\n            weather.wind = parameters.find(e => e.name === \"ws\").values[0];\n            weather.gust = parameters.find(e => e.name === \"gust\").values[0];\n            weather.symbol = this.getIcon(parameters.find(e => e.name === \"Wsymb2\").values[0] as never, timeSerieDate)\n\n            hoursIndex++;\n            timeSeriesIndex++;\n        }\n\n        // --- Fill days ---\n        timeSeriesIndex = 0;\n        for (let i = 0; i < forecast.days.length; i++) {\n            const day = forecast.days[i];\n            for (let j = 0; j < day.spans.length; j++) {\n\n                const span = day.spans[j];\n                const timeSerie: any = timeSeries[timeSeriesIndex];\n                const timeSerieDate: Date = new Date(timeSerie.validTime);\n\n                // If this time serie is to old\n                if (span.startDate < timeSerieDate) {\n                    continue;\n                }\n                // If this time serie is not old enough\n                if (span.startDate > timeSerieDate) {\n                    timeSeriesIndex++;\n                    j--;\n                    continue;\n                }\n\n                let weather = span.weather[this.name];\n\n                const iconDate = new Date((span.startDate.getTime() + span.endDate.getTime()) / 2);\n\n                timeSeriesIndex = this.sumWeather(timeSeries, timeSeriesIndex, span.endDate, iconDate, weather);\n            }\n        }\n    }\n\n    /**\n     * Sums the weather in a time series from an index up to an end date.\n     * The weather will be added to the given weather object.\n     * The index of the end date will be returned.\n     * @returns Index of the end date.\n     */\n    private sumWeather(timeSeries: any[], startIndex: number, endDate: Date, symbolDate: Date, weather: IWeather): number {\n        let index = startIndex;\n\n        let totalPrecipitation = 0;\n        let minTemp: number = NaN;\n        let maxTemp: number = NaN;\n        let maxWind: number = 0;\n        let maxGust: number = 0;\n        let symbols: { [key: number]: number } = {}\n\n        while (index < timeSeries.length) {\n            const timeSerie = timeSeries[index];\n            const timeSerieDate: Date = new Date(timeSerie.validTime);\n\n            if (timeSerieDate > endDate) {\n                index--\n                break;\n            }\n\n            const parameters: any[] = timeSerie.parameters;\n\n            // Precipitation\n            totalPrecipitation += parameters.find(e => e.name === \"pmean\").values[0];\n\n            // Temperature\n            const temp = parameters.find(e => e.name === \"t\").values[0];\n            if (isNaN(minTemp) || temp < minTemp) {\n                minTemp = temp;\n            }\n            if (isNaN(maxTemp) || temp > maxTemp) {\n                maxTemp = temp;\n            }\n            // Wind\n            const wind = parameters.find(e => e.name === \"ws\").values[0];\n            if (wind > maxWind) {\n                maxWind = wind;\n            }\n            // Gust\n            const gust = parameters.find(e => e.name === \"gust\").values[0];\n            if (gust > maxGust) {\n                maxGust = gust;\n            }\n            //= parameters.find(e => e.name === \"pmean\").values[0];\n            //= parameters.find(e => e.name === \"ws\").values[0];\n            //= parameters.find(e => e.name === \"gust\").values[0];\n            //= this.getIcon(parameters.find(e => e.name === \"Wsymb2\").values[0] as never, timeSerieDate)\n\n            const symbol: number = parameters.find(e => e.name === \"Wsymb2\").values[0];\n            if (symbol in symbols) {\n                symbols[symbol] += 1;\n            } else {\n                symbols[symbol] = 1;\n            }\n\n            index++;\n        }\n\n        const count = index - startIndex + 1;\n\n        weather.precipitation = Math.round(10 * totalPrecipitation / count) / 10;\n        weather.precipitationUnit = \"mm/h\";\n        weather.temperatureMax = maxTemp;\n        weather.temperatureMin = minTemp;\n        weather.temperature = (maxTemp + minTemp) / 2;\n        weather.wind = maxWind;\n        weather.gust = maxGust;\n\n        let maxSymbolCount = 0;\n        let maxSymbol = \"\";\n        for (let symbol in symbols) {\n            const symbolCount = symbols[symbol];\n            if (symbolCount > maxSymbolCount) {\n                maxSymbolCount = symbolCount;\n                maxSymbol = symbol;\n            }\n        }\n\n        weather.symbol = this.getIcon(maxSymbol as never, symbolDate);\n\n        return index;\n    }\n}\n","import { listDaysFromTomorrow, listHoursFromNow } from \"../helpers/date\";\nimport { ILocation } from \"../location/types\";\nimport { ICombinedWeather, IWeatherDay, IWeatherForecast, IWeatherPoint, IWeatherSpan, WeatherIcon } from \"./types\";\nimport AbstractProvider from \"./weatherProviders/abstractProvider\";\nimport MET from \"./weatherProviders/MET\";\nimport SMHI from \"./weatherProviders/SMHI\";\n\nconst weatherProviders: AbstractProvider[] = [new SMHI(), new MET()]\n\nexport interface forecastCallback {\n    onSuccess: (forecast: IWeatherForecast) => void,\n    onError: (error: string) => void,\n}\n\nexport function newForecast(location: ILocation, callback: forecastCallback): void {\n    const forecast = createEmptyForecast(location);\n\n    let remaining = weatherProviders.length;\n\n    const onSuccess = () => {\n        remaining--;\n\n        if (remaining === 0) {\n            callback.onSuccess(forecast);\n        }\n    }\n\n    const onError = (error: Error) => {\n        callback.onError(error.message);\n    }\n\n    weatherProviders.forEach(provider => {\n        provider.fetchForecast(forecast, location, onSuccess, onError);\n    });\n}\n\nexport function createEmptyForecast(location?: ILocation): IWeatherForecast {\n    const now = new Date();\n\n    return {\n        hours: createEmptyHours(),\n        days: createEmptyDays(now),\n        providers: listProviderNames(),\n        location: location ? location : { country: \"\", name: \"\", lat: NaN, long: NaN, alt: NaN },\n    };\n}\n\nfunction listProviderNames() {\n    return weatherProviders.map((provider) => { return provider.name });\n}\n\nfunction createEmptyHours(): IWeatherPoint[] {\n    return listHoursFromNow(24).map((date: Date) => {\n        return {\n            date: date,\n            weather: createEmptyCombinedWeather(),\n        }\n    });\n}\n\nfunction createEmptyDays(start: Date): IWeatherDay[] {\n    return listDaysFromTomorrow(8).map((date: Date, index: number) => {\n        let spans: IWeatherSpan[] = []\n        const year = date.getUTCFullYear();\n        const month = date.getUTCMonth();\n        const day = date.getUTCDate();\n        if (index <= 4) {\n            spans = [\n                {\n                    startDate: new Date(Date.UTC(year, month, day, 0)),\n                    endDate: new Date(Date.UTC(year, month, day, 6)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 6)),\n                    endDate: new Date(Date.UTC(year, month, day, 12)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 12)),\n                    endDate: new Date(Date.UTC(year, month, day, 18)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 18)),\n                    endDate: new Date(Date.UTC(year, month, day, 24)),\n                    weather: createEmptyCombinedWeather(),\n                }\n            ]\n        }\n        else {\n            spans = [\n                {\n                    startDate: new Date(Date.UTC(year, month, day, 0)),\n                    endDate: new Date(Date.UTC(year, month, day, 12)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 12)),\n                    endDate: new Date(Date.UTC(year, month, day, 24)),\n                    weather: createEmptyCombinedWeather(),\n                }\n            ]\n        }\n\n        return {\n            spans: spans,\n        }\n    });\n}\n\nfunction createEmptyCombinedWeather(): ICombinedWeather {\n    let combined: ICombinedWeather = {};\n\n    listProviderNames().forEach(name => {\n        combined[name] = {\n            temperature: NaN,\n            temperatureMax: NaN,\n            temperatureMin: NaN,\n            wind: NaN,\n            gust: NaN,\n            precipitation: NaN,\n            precipitationUnit: \"\",\n            symbol: WeatherIcon.unknown,\n        }\n    });\n\n    return combined;\n}\n","import { ForecastActionTypes, FORECAST_FETCH_START, FORECAST_FETCH_SUCCESS, FORECAST_FETCH_FAILURE } from \"./types\";\nimport { Dispatch } from \"redux\";\nimport { ILocation } from \"../../location/types\";\nimport { forecastCallback, newForecast } from \"../../weather\";\nimport { IWeatherForecast } from \"../../weather/types\";\n\nfunction searchStart(): ForecastActionTypes {\n    return {\n        type: FORECAST_FETCH_START,\n    }\n}\n\nfunction searchSuccess(forecast: IWeatherForecast): ForecastActionTypes {\n    return {\n        type: FORECAST_FETCH_SUCCESS,\n        forecast: forecast,\n    }\n}\n\nfunction searchFailure(errorMessage: string): ForecastActionTypes {\n    return {\n        type: FORECAST_FETCH_FAILURE,\n        errorMessage: errorMessage,\n    }\n}\n\nexport const fetchForecasts = (location: ILocation) => async (dispatch: Dispatch) => {\n    const callback: forecastCallback = {\n        onSuccess: (forecast: IWeatherForecast) => dispatch(searchSuccess(forecast)),\n        onError: (errorMessage: string) => dispatch(searchFailure(errorMessage)),\n    }\n\n    dispatch(searchStart());\n    newForecast(location, callback);\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectLocation } from \"../../../store/locationSearch/actions\";\nimport { AppState } from \"../../../store\";\nimport LocationSearchItem from \"../LocationSearchItem\";\nimport { Divider } from \"antd\";\nimport { fetchForecasts } from \"../../../store/forecasts/actions\";\nimport \"./style.css\";\nimport { ILocation } from \"../../../location/types\";\n\ninterface ILocationSearchListProps {\n    showUserLocation: boolean,\n    userLocation?: ILocation,\n    selectLocation: (location: ILocation) => void,\n    fetchForecasts: (location: ILocation) => void,\n    onSelect: () => void,\n    locationResults: ILocation[],\n    selectedLocation?: ILocation,\n}\n\nclass LocationSearchList extends React.Component<ILocationSearchListProps>{\n\n    private onLocationSelect(location: ILocation): void {\n        // Select location and fetch forecast if it is a new location\n        if (location.country !== this.props.selectedLocation?.country) {\n            this.props.selectLocation(location);\n            this.props.fetchForecasts(location);\n        }\n        this.props.onSelect();\n    }\n\n    render() {\n        return (\n            <div className=\"location-list\">\n                {this.props.showUserLocation && this.props.userLocation &&\n                    <React.Fragment>\n                        <LocationSearchItem location={this.props.userLocation} onSelect={location => this.onLocationSelect(location)} />\n                        <Divider style={{ margin: 0 }} />\n                    </React.Fragment>\n                }\n                {this.props.locationResults.map((location, index) =>\n                    <React.Fragment key={index}>\n                        <LocationSearchItem location={location} onSelect={location => this.onLocationSelect(location)} />\n                        <Divider style={{ margin: 0 }} />\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        userLocation: state.locationSearch.userLocation,\n        locationResults: state.locationSearch.geocodeResults,\n        selectedLocation: state.locationSearch.selectedLocation,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        selectLocation: (location: ILocation) => dispatch(selectLocation(location)),\n        fetchForecasts: (location: ILocation) => dispatch(fetchForecasts(location)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationSearchList);","import { Button, Divider, Input, Spin } from \"antd\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { SearchOutlined } from '@ant-design/icons';\nimport { AppState } from \"../../../store\";\nimport LocationSearchList from \"../LocationSearchList\";\nimport './style.css';\nimport { geocode } from \"../../../store/locationSearch/actions\";\n\ninterface ILocationSearchProps {\n    searchLocations: (searchTerm: string) => void,\n    isLoading: boolean,\n    close: () => void,\n}\n\ninterface ILocationSearchState {\n    showUserPosition: boolean,\n}\n\nclass LocationSearch extends React.Component<ILocationSearchProps, ILocationSearchState>{\n    constructor(props: Readonly<ILocationSearchProps>) {\n        super(props)\n\n        this.state = {\n            showUserPosition: true,\n        }\n    }\n\n    private onChange(text: string) {\n        this.props.searchLocations(text);\n\n        const show = text.length == 0;\n\n        if (show !== this.state.showUserPosition) {\n            this.setState({\n                ...this.state,\n                showUserPosition: show,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"search\">\n                <div className=\"search-bar\">\n                    <Input\n                        className=\"search-input\"\n                        size=\"large\"\n                        bordered={false}\n                        placeholder=\"Sök\"\n                        autoFocus\n                        allowClear\n                        prefix={<SearchOutlined />}\n                        onChange={value => this.onChange(value.target.value)}\n                    />\n                    <Button className=\"search-cancel-button\" size=\"large\" ghost onClick={() => this.props.close()}>Avbryt</Button>\n                </div>\n                <Divider style={{ margin: 0 }} />\n                {this.props.isLoading ?\n                    <Spin className=\"location-search-spin\" />\n                    :\n                    <LocationSearchList onSelect={() => this.props.close()} showUserLocation={this.state.showUserPosition} />\n                }\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        isLoading: state.locationSearch.geocodeIsLoading,\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        searchLocations: (searchTerm: string) => dispatch(geocode(searchTerm)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationSearch);","import React from \"react\";\nimport './style.css';\nimport { LeftOutlined } from '@ant-design/icons';\nimport { Button, Divider, Typography } from \"antd\";\n\nconst { Title } = Typography;\n\ninterface IHeaderProps {\n    backButton?: () => void,\n    backButtonName?: string;\n    title: string;\n}\n\nexport default class Header extends React.Component<IHeaderProps>{\n    render() {\n        return (\n            <div className=\"header-container\">\n                <div className=\"header-grid\">\n                    <Title className=\"header-title\" level={5}>\n                        {this.props.title}\n                    </Title>\n                    {this.props.backButton &&\n                        <Button\n                            className=\"header-back-button\"\n                            onClick={() => this.props.backButton ? this.props.backButton() : {}}\n                            size=\"large\"\n                            ghost\n                        >\n                            {this.props.backButtonName}\n                        </Button>\n                    }\n                </div>\n                <Divider className=\"header-divider\" />\n            </div>\n        );\n    }\n}\n","\nexport interface ISettingsState {\n    themeMode: ThemeModeTypes,\n    systemTheme: ThemeTypes,\n    theme: ThemeTypes,\n    showGust: boolean,\n    showMinMaxTemp: boolean,\n}\n\nexport type SettingTypes = {\n    [key in keyof ISettingsState]?: ISettingsState[key];\n};\n\n// Theme mode\n\nexport type ThemeModeTypes = \"light\" | \"dark\" | \"system\";\n\nexport const UPDATE_THEME_MODE = \"UPDATE_THEME_MODE\";\n\ninterface IThemeModeAction {\n    type: typeof UPDATE_THEME_MODE,\n    themeMode: ThemeModeTypes,\n}\n\n\n// Theme\nexport type ThemeTypes = \"light\" | \"dark\";\n\n// System theme\n\nexport const UPDATE_SYSTEM_THEME = \"UPDATE_SYSTEM_THEME\";\n\ninterface IUpdateSystemThemeAction {\n    type: typeof UPDATE_SYSTEM_THEME,\n    systemTheme: ThemeTypes,\n}\n\n\n\n// Settings\nexport const UPDATE_SETTING = \"UPDATE_SETTING\";\n\ninterface IUpdateSetting {\n    type: typeof UPDATE_SETTING,\n    setting: SettingTypes,\n}\n\n\nexport type SettingsActionTypes = IThemeModeAction | IUpdateSystemThemeAction | IUpdateSetting;\n","import React from \"react\";\nimport './style.css';\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../store\";\nimport Header from \"../../atoms/Header\";\nimport { Divider, Radio, Space, Switch, Typography } from \"antd\";\nimport { SettingTypes, ThemeModeTypes } from \"../../../store/settings/types\";\nimport { updateSetting as updateSettings, updateThemeMode } from \"../../../store/settings/actions\";\n\nconst { Text } = Typography;\n\ninterface ISettingsPageProps {\n    theme: ThemeModeTypes,\n    showGust: boolean,\n    showMinMaxTemp: boolean,\n    updateThemeMode: (theme: ThemeModeTypes) => void,\n    updateSettings: (setting: SettingTypes) => void,\n    close: () => void,\n}\n\n\nclass SettingsPage extends React.Component<ISettingsPageProps>{\n    private onThemeChange(value: number) {\n        switch (value) {\n            case 1:\n                this.props.updateThemeMode(\"light\");\n                break;\n            case 2:\n                this.props.updateThemeMode(\"dark\");\n                break;\n            case 3:\n                this.props.updateThemeMode(\"system\");\n                break;\n        }\n    }\n\n    render() {\n        let themeValue;\n        switch (this.props.theme) {\n            case \"light\":\n                themeValue = 1;\n                break;\n            case \"dark\":\n                themeValue = 2;\n                break;\n            case \"system\":\n                themeValue = 3;\n                break;\n        }\n\n        return (\n            <div className=\"settings-page\">\n                <Header title=\"Inställningar\" backButton={() => this.props.close()} backButtonName=\"Klar\" />\n\n                <div className=\"settings-content\">\n                    <div>\n                        <Text className=\"settings-options-title\" type=\"secondary\" strong>Utseende</Text>\n                        <Divider />\n                        <Radio.Group className=\"settings-options\" value={themeValue} onChange={(e) => this.onThemeChange(e.target.value)}>\n                            <Space direction=\"vertical\">\n                                <Radio value={1}>Ljust</Radio>\n                                <Divider />\n                                <Radio value={2}>Mörkt</Radio>\n                                <Divider />\n                                <Radio value={3}>Följ System</Radio>\n                            </Space>\n                        </Radio.Group>\n                        <Divider />\n\n                        <Text className=\"settings-options-title\" type=\"secondary\" strong>Väder</Text>\n                        <Divider />\n                        <div className=\"settings-options\">\n                            <Space direction=\"vertical\">\n                                <div className=\"settings-row\">\n                                    <Text>Visa min/max temperatur</Text>\n                                    <Switch checked={this.props.showMinMaxTemp} onChange={(status) => this.props.updateSettings({ showMinMaxTemp: status })} />\n                                </div>\n                                <Divider />\n                                <div className=\"settings-row\">\n                                    <Text>Visa byvind</Text>\n                                    <Switch checked={this.props.showGust} onChange={(status) => this.props.updateSettings({ showGust: status })} />\n                                </div>\n                            </Space>\n                        </div>\n                        <Divider />\n                    </div>\n\n                    <a id=\"privacy-policy\" href=\"https://regnkollen.se/privacy-policy.html\" target=\"_blank\">privacy policy</a >\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        theme: state.settings.themeMode,\n        showGust: state.settings.showGust,\n        showMinMaxTemp: state.settings.showMinMaxTemp,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        updateThemeMode: (theme: ThemeModeTypes) => dispatch(updateThemeMode(theme)),\n        updateSettings: (setting: SettingTypes) => dispatch(updateSettings(setting)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n","import { SettingTypes, ThemeModeTypes, ThemeTypes, UPDATE_SETTING, UPDATE_SYSTEM_THEME, UPDATE_THEME_MODE } from './types';\n\n\nexport function updateThemeMode(themeMode: ThemeModeTypes) {\n    return {\n        type: UPDATE_THEME_MODE,\n        themeMode: themeMode,\n    }\n}\n\nexport function updateSystemTheme(systemTheme: ThemeTypes) {\n    return {\n        type: UPDATE_SYSTEM_THEME,\n        systemTheme: systemTheme,\n    }\n}\n\nexport function updateSetting(setting: SettingTypes) {\n    return {\n        type: UPDATE_SETTING,\n        setting: setting,\n    }\n}\n","import React from \"react\";\nimport WeatherTableList from \"../../weather/WeatherTableList\";\nimport LocationSearch from \"../../location/LocationSearch\";\nimport { Button, Typography } from 'antd';\nimport { SearchOutlined, SettingOutlined } from '@ant-design/icons';\nimport './style.css';\nimport { connect } from \"react-redux\";\nimport { requestUserPosition, selectUserLocation } from \"../../../store/locationSearch/actions\";\nimport { AppState } from \"../../../store\";\nimport { ILocation } from \"../../../location/types\";\nimport SettingsPage from \"../SettingsPage\";\nimport { fetchForecasts } from \"../../../store/forecasts/actions\";\nimport { updateSystemTheme } from \"../../../store/settings/actions\";\nimport { ThemeTypes } from \"../../../store/settings/types\";\n\nconst { Title } = Typography;\n\ninterface IWeatherPageProps {\n    selectedLocation: ILocation,\n    findUserPosition: (onSuccess?: (location: ILocation) => void) => void,\n    selectUserLocation: () => void,\n    fetchForecasts: (location: ILocation) => void,\n    updateSystemTheme: (systemTheme: ThemeTypes) => void,\n}\n\ninterface IWeatherPageState {\n    showLocationSearch: boolean,\n    showSettingsPage: boolean,\n}\n\nclass WeatherPage extends React.Component<IWeatherPageProps, IWeatherPageState>{\n    constructor(props: Readonly<IWeatherPageProps>) {\n        super(props)\n\n        this.state = {\n            showLocationSearch: false,\n            showSettingsPage: false,\n        }\n    }\n\n    componentDidMount() {\n        // Find user position, select it as location, and fetch the forecast\n        this.props.fetchForecasts(this.props.selectedLocation);\n\n        this.props.findUserPosition(location => {\n            if (location.name !== this.props.selectedLocation.name) {\n                this.props.fetchForecasts(location);\n                this.props.selectUserLocation();\n            }\n        });\n\n        // React on system theme change\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            const theme = e.matches ? \"dark\" : \"light\";\n            this.props.updateSystemTheme(theme);\n        });\n    }\n\n    private openLocationSearch() {\n        this.setState({\n            showLocationSearch: true,\n        })\n    }\n\n    private closeLocationSearch() {\n        this.setState({\n            showLocationSearch: false,\n        });\n    }\n\n    private openSettingsSearch() {\n        this.setState({\n            showSettingsPage: true,\n        })\n    }\n\n    private closeSettingsSearch() {\n        this.setState({\n            showSettingsPage: false,\n        });\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"weather-page\" style={{ height: 0, overflow: (this.state.showLocationSearch || this.state.showSettingsPage) ? 'hidden' : 'unset' }}>\n                    <div className=\"button-container\">\n                        <Button className=\"settings-button\" ghost icon={<SettingOutlined />} shape=\"circle\" size=\"large\" onClick={() => this.openSettingsSearch()} />\n                        <Button className=\"search-location-button\" ghost icon={<SearchOutlined />} shape=\"circle\" size=\"large\" onClick={() => this.openLocationSearch()} />\n                    </div>\n                    <Title className=\"title\" style={{ fontWeight: 1, fontSize: 50 }}>{this.props.selectedLocation?.name}</Title>\n                    <WeatherTableList />\n                </div>\n\n                {this.state.showLocationSearch &&\n                    <LocationSearch close={() => this.closeLocationSearch()} />\n                }\n\n                {this.state.showSettingsPage &&\n                    <SettingsPage close={() => this.closeSettingsSearch()} />\n                }\n\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        selectedLocation: state.locationSearch.selectedLocation,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        findUserPosition: (onSuccess: any) => dispatch(requestUserPosition(onSuccess)),\n        selectUserLocation: () => dispatch(selectUserLocation()),\n        fetchForecasts: (location: ILocation) => dispatch(fetchForecasts(location)),\n        updateSystemTheme: (systemTheme: ThemeTypes) => dispatch(updateSystemTheme(systemTheme)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherPage);\n","import './App.css';\nimport WeatherPage from './components/pages/WeatherPage';\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <div id=\"page\">\n        <WeatherPage />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n/**\n * Sets a new cookie. If a cookie with the given name already exists, it will be overwritten.\n * @param name Name of the cookie.\n * @param value Value of the cookie.\n * @param maxAge Seconds until the cookie will expire. Leave empty for session cookie.\n */\nexport function setCookie(name: string, value: string, maxAge?: number): void {\n    let expires;\n    if (maxAge) {\n        expires = \"; max-age=\" + maxAge;\n    } else {\n        expires = \"\";\n    }\n\n    document.cookie = name + \"=\" + encodeURI(value) + expires + \"; SameSite=Strict; path=/\";\n}\n\n/**\n * Returns the value of a cookie. If the cookie does not exist, null is returned.\n * @param name Name of the cookie.\n * @returns Value of the cookie or null.\n */\nexport function getCookie(name: string): string | null {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n        const [cookieName, cookieValue] = cookies[i].trim().split('=');\n\n        if (cookieName === name) {\n            return decodeURI(cookieValue);\n        }\n    }\n\n    return null;\n}\n\n/**\n * Checks if a cookie exists.\n * @param name Name of the cookie.\n * @returns True if it exists, otherwise false.\n */\nexport function existsCookie(name: string): boolean {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n        const cookieName = cookies[i].split('=')[0];\n\n        if (cookieName === name) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Deletes a cookie.\n * @param name Name of the cookie to delete.\n */\nexport function deleteCookie(name: string): void {\n    document.cookie = name + '=; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Path=/;';\n}\n","import { getCookie, setCookie } from \"../../helpers/cookies\";\nimport { ILocation } from \"../../location/types\";\nimport { GEOCODE_FAILURE, GEOCODE_START, GEOCODE_SUCCESS, ILocationSearchState, LOCATE_USER_FAILURE, LOCATE_USER_START, LOCATE_USER_SUCCESS, LocationActionTypes, SELECT_LOCATION, SELECT_USER_LOCATION } from \"./types\";\n\nconst initialState: ILocationSearchState = {\n    selectedLocation: getInitialLocation(),\n    geocodeResults: [],\n    geocodeIsLoading: false,\n    geocodeErrorMessage: '',\n    userLocation: undefined,\n    userLocationIsLoading: false,\n    userLocationErrorMessage: '',\n}\n\nexport function locationSearchReducer(state = initialState, action: LocationActionTypes): ILocationSearchState {\n    switch (action.type) {\n        case SELECT_LOCATION:\n            saveLocation(action.location);\n            return {\n                ...state,\n                selectedLocation: action.location,\n            };\n        case SELECT_USER_LOCATION:\n            if (!state.userLocation) {\n                return { ...state };\n            }\n\n            saveLocation(state.userLocation);\n\n            return {\n                ...state,\n                selectedLocation: state.userLocation,\n            }\n        case GEOCODE_START:\n            return {\n                ...state,\n                geocodeIsLoading: true\n            };\n        case GEOCODE_SUCCESS:\n            return {\n                ...state,\n                geocodeIsLoading: false,\n                geocodeResults: action.results,\n                geocodeErrorMessage: \"\",\n            }\n        case GEOCODE_FAILURE:\n            return {\n                ...state,\n                geocodeIsLoading: false,\n                geocodeResults: [],\n                geocodeErrorMessage: action.errorMessage\n            };\n        case LOCATE_USER_START:\n            return {\n                ...state,\n                userLocationIsLoading: true,\n            }\n        case LOCATE_USER_SUCCESS:\n            return {\n                ...state,\n                userLocationIsLoading: false,\n                userLocation: action.location,\n            }\n        case LOCATE_USER_FAILURE:\n            return {\n                ...state,\n                userLocationIsLoading: false,\n                userLocationErrorMessage: action.errorMessage,\n            }\n\n        default:\n            return state;\n    }\n}\n\nfunction saveLocation(location: ILocation): void {\n    const str = JSON.stringify(location);\n    setCookie(\"weather-location\", str, 60 * 60 * 24 * 365);\n}\n\nfunction getDefaultLocation(): ILocation {\n    return {\n        name: \"Stockholm\",\n        country: \"Sverige\",\n        lat: 59.33066,\n        long: 18.06855,\n        alt: 10,\n    }\n}\n\nfunction getInitialLocation(): ILocation {\n    const json = getCookie(\"weather-location\");\n\n    if (json !== null) {\n        try {\n            let location: ILocation = JSON.parse(json);\n            return location;\n        } catch {}\n    }\n\n    return getDefaultLocation();\n}\n\n","import { IWeatherState as IForecastState, ForecastActionTypes, FORECAST_FETCH_START, FORECAST_FETCH_SUCCESS, FORECAST_FETCH_FAILURE } from \"./types\";\nimport { createEmptyForecast } from \"../../weather\";\n\nconst initialState: IForecastState = {\n    forecast: createEmptyForecast(undefined),\n    isLoading: true,\n    errorMessage: undefined,\n}\n\nexport function forecastReducer(state = initialState, action: ForecastActionTypes): IForecastState {\n    switch (action.type) {\n        case FORECAST_FETCH_START:\n            return {\n                ...state,\n                isLoading: true,\n            };\n\n        case FORECAST_FETCH_SUCCESS:\n            return {\n                ...state,\n                forecast: action.forecast,\n                isLoading: false,\n                errorMessage: undefined,\n            };\n\n        case FORECAST_FETCH_FAILURE:\n            return {\n                ...state,\n                isLoading: false,\n                errorMessage: action.errorMessage,\n            }\n\n        default:\n            return state;\n    }\n}\n","import { getCookie, setCookie } from \"../../helpers/cookies\";\nimport { ISettingsState, SettingsActionTypes, ThemeModeTypes, ThemeTypes, UPDATE_SETTING, UPDATE_SYSTEM_THEME, UPDATE_THEME_MODE } from \"./types\";\n\nconst THEME_MODE_COOKIE = \"theme-mode\";\n\nconst initialState: ISettingsState = {\n    themeMode: getCookie(THEME_MODE_COOKIE) as ThemeModeTypes || \"system\",\n    systemTheme: getInitialSystemTheme(),\n    theme: \"light\",\n    showGust: getCookie(\"show-gust\") === \"true\",\n    showMinMaxTemp: getCookie(\"show-min-max-temp\") === \"true\",\n}\n\nexport function settingsReducer(state = initialState, action: SettingsActionTypes): ISettingsState {\n    switch (action.type) {\n        case UPDATE_THEME_MODE:\n\n            let theme: ThemeTypes;\n            switch (action.themeMode) {\n                case \"light\":\n                    theme = \"light\";\n                    break;\n                case \"dark\":\n                    theme = \"dark\";\n                    break;\n                case \"system\":\n                    theme = state.systemTheme;\n            }\n\n            applyTheme(theme);\n            setCookie(THEME_MODE_COOKIE, action.themeMode, 365 * 24 * 60 * 60)\n\n            return {\n                ...state,\n                themeMode: action.themeMode,\n                theme: theme,\n            };\n\n        case UPDATE_SYSTEM_THEME:\n            if (state.themeMode === \"system\") {\n                applyTheme(action.systemTheme);\n            }\n\n            return {\n                ...state,\n                systemTheme: action.systemTheme,\n            }\n\n        case UPDATE_SETTING:\n            if (action.setting.showGust !== undefined) {\n                setCookie(\"show-gust\", action.setting.showGust.toString(), 365 * 24 * 60 * 60)\n            }\n            if (action.setting.showMinMaxTemp !== undefined) {\n                setCookie(\"show-min-max-temp\", action.setting.showMinMaxTemp.toString(), 365 * 24 * 60 * 60)\n            }\n\n            return {\n                ...state,\n                ...action.setting,\n            }\n\n        default:\n            return state;\n    }\n}\n\nfunction applyTheme(theme: ThemeTypes) {\n    const DARK_CLASS = \"dark\";\n\n    if (theme === \"dark\") {\n        document.documentElement.classList.add(DARK_CLASS);\n    } else {\n        document.documentElement.classList.remove(DARK_CLASS);\n    }\n}\n\nfunction getInitialSystemTheme(): ThemeTypes {\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        return \"dark\";\n    } else {\n        return \"light\";\n    }\n}\n\nfunction setInitialTheme() {\n    let theme: ThemeTypes;\n    switch (initialState.themeMode) {\n        case \"light\":\n            theme = \"light\";\n            break;\n        case \"dark\":\n            theme = \"dark\";\n            break;\n        case \"system\":\n            theme = initialState.systemTheme;\n    }\n\n    applyTheme(theme);\n}\n\nsetInitialTheme();","import { createStore, compose, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { locationSearchReducer } from \"./locationSearch/reducers\";\nimport { forecastReducer } from \"./forecasts/reducers\";\nimport { settingsReducer } from \"./settings/reducers\";\n\nconst rootReducer = combineReducers({\n    locationSearch: locationSearchReducer,\n    forecasts: forecastReducer,\n    settings: settingsReducer,\n});\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst initialState = {}\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nexport default createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(thunk),\n        composeEnhancers()\n    )\n);\n\nexport type AppState = ReturnType<typeof rootReducer>\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { register, unregister } from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//unregister();\nregister();\n"],"sourceRoot":""}