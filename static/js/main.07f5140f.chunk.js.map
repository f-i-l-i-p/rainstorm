{"version":3,"sources":["icons3 sync /^/.//.*/.svg$","icons3/clear_sky_day.svg","icons3/clear_sky_night.svg","icons3/cloudy.svg","icons3/fog.svg","icons3/half_clear_sky_day.svg","icons3/half_clear_sky_night.svg","icons3/heavy_rain.svg","icons3/heavy_sleet.svg","icons3/light_rain.svg","icons3/light_sleet.svg","icons3/moderate_rain.svg","icons3/moderate_sleet.svg","icons3/nearly_clear_sky_day.svg","icons3/nearly_clear_sky_night.svg","icons3/overcast.svg","icons3/snow.svg","icons3/sunrise.svg","icons3/sunset.svg","icons3/thunder.svg","icons3/unknown.svg","components/atoms/Paper/index.tsx","components/weather/WeatherCell/index.tsx","components/weather/TimeCell/index.tsx","components/weather/WeatherTable/index.tsx","components/weather/WeatherTableList/index.tsx","location/geocoder.ts","store/locationSearch/types.ts","store/locationSearch/actions.ts","weather/types.ts","components/location/LocationSearchItem/index.tsx","store/forecasts/types.ts","helpers/date.ts","weather/emptyForecast.ts","weather/sunrise.ts","weather/iconMaker.ts","weather/weatherProviders/abstractProvider.ts","weather/weatherProviders/MET.ts","weather/weatherProviders/SMHI.ts","weather/forecastMaker.ts","store/forecasts/actions.ts","components/location/LocationSearchList/index.tsx","components/location/LocationSearch/index.tsx","components/atoms/Header/index.tsx","store/settings/types.ts","components/pages/SettingsPage/index.tsx","webpack:///./src/icons3/sunrise.svg?59d2","store/settings/actions.ts","webpack:///./src/icons3/sunset.svg?8942","components/weather/SunTimes/index.tsx","location/geolocation.ts","components/pages/WeatherPage/index.tsx","App.tsx","serviceWorker.ts","helpers/cookies.ts","store/locationSearch/reducers.ts","store/forecasts/reducers.ts","store/settings/reducers.ts","store/index.ts","index.tsx"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Paper","props","className","style","children","Text","Typography","connect","state","showGust","settings","showMinMaxTemp","undefined","weather","Fragment","isNaN","temperature","temperatureMin","temperatureMax","strong","Math","round","type","marginLeft","marginRight","symbol","alt","src","require","default","wind","gust","precipitation","precipitationUnit","TimeCell","time","Title","WeatherTable","level","this","name","width","height","providers","ignored","index","provider","margin","overflowX","justifyContent","tableData","column","formatTime","React","Component","any","date","getHours","slice","startDate","endDate","WeatherTableList","result","getDay","pairs","i","forecast","days","length","push","hours","getTableName","weatherPair","weatherDay","index2","spans","lastSearch","forecasts","isLoading","selectedLocation","locationSearch","lastSearchId","startGeocode","searchTerm","listener","trimmed","trim","onSuccess","newSearchId","setTimeout","tryPerformSearch","isOutdated","searchId","fetchGeocodeData","a","process","fetch","formatData","json","locations","loc","country","lat","Number","long","ok","console","warn","statusText","onAbort","SELECT_LOCATION","GEOCODE_START","GEOCODE_SUCCESS","GEOCODE_FAILURE","selectLocation","location","WeatherIcon","Item","onClick","onSelect","FORECAST_FETCH_START","FORECAST_FETCH_SUCCESS","FORECAST_FETCH_FAILURE","listHoursFromNow","count","start","Date","setHours","setMinutes","setSeconds","setMilliseconds","listDates","listDaysFromTomorrow","setDate","getDate","interval","times","getTime","createEmptyForecast","now","sunTimes","sunrise","sunset","createEmptyCombinedWeather","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","UTC","getProviderNames","NaN","combined","forEach","unknown","getSunTimes","callback","dateString","toISOString","split","request","url","formatResponse","onError","isNight","dateSeconds","dateToTime","sunRiseSeconds","sunSetSeconds","isSpanNight","end","toNight","icon","clear_sky_day","clear_sky_night","half_clear_sky_day","half_clear_sky_night","nearly_clear_sky_day","nearly_clear_sky_night","getMinutes","getSeconds","getMilliseconds","AbstractProvider","responseJson","onFailure","requestData","toString","response","error","MET","icons","cloudy","fog","heavy_rain","thunder","heavy_sleet","snow","light_rain","light_sleet","moderate_rain","moderate_sleet","status","timeSeries","properties","timeseries","hoursIndex","timeSeriesIndex","timeSerie","timeSerieDate","symbol_str","data","next_1_hours","summary","symbol_code","details","precipitation_amount","next_6_hours","next_12_hours","instant","air_temperature","wind_speed","wind_speed_of_gust","j","span","spanLength","minTemp","maxTemp","air_temperature_min","air_temperature_max","nextTimeSerie","pThis","pNext","min","max","SMHI","value","substr","validTime","parameters","find","values","getIcon","iconDate","sumWeather","startIndex","symbolDate","totalPrecipitation","maxWind","maxGust","symbols","temp","maxSymbolCount","maxSymbol","symbolCount","weatherProviders","newForecast","sunTimesDone","remainingProviders","waitingProviders","onProviderResponse","canFillForecast","fillForecast","onSunTimesResponse","sunTimesResponse","fetchForecast","searchSuccess","fetchForecasts","dispatch","LocationSearchList","showHistory","locationHistory","locationResults","LocationSearchItem","onLocationSelect","geocodeResults","LocationSearch","text","searchLocations","show","setState","size","bordered","placeholder","autoFocus","allowClear","prefix","SearchOutlined","onChange","target","ghost","close","geocodeIsLoading","searchString","results","errorMessage","Header","title","backButton","backButtonName","UPDATE_THEME_MODE","UPDATE_SYSTEM_THEME","UPDATE_SETTING","SettingsPage","updateThemeMode","themeValue","theme","Group","onThemeChange","direction","checked","updateSettings","href","rel","_metadata","themeMode","setting","_excluded","_extends","assign","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","SvgSunrise","_ref","svgRef","titleId","viewBox","xmlns","ref","transform","fill","d","stroke","strokeLinecap","strokeWidth","paintOrder","strokeLinejoin","color","colorRendering","dominantBaseline","imageRendering","shapeRendering","fontFeatureSettings","fontVariantAlternates","fontVariantCaps","fontVariantLigatures","fontVariantNumeric","fontVariantPosition","isolation","mixBlendMode","shapePadding","textDecorationColor","textDecorationLine","textDecorationStyle","textIndent","textOrientation","textTransform","whiteSpace","ForwardRef","SvgSunset","padStart","Icon","component","SunRise","SunSet","startGeolocate","navigator","geolocation","getCurrentPosition","position","geocodeCoordinates","coords","coordinates","fetchReverseGeocode","latitude","longitude","altitude","display_name","address","city","municipality","county","lon","WeatherPage","showLocationSearch","showSettingsPage","window","matchMedia","addEventListener","matches","updateSystemTheme","overflow","SettingOutlined","shape","openSettingsSearch","EnvironmentOutlined","geolocate","openLocationSearch","fontWeight","fontSize","weatherIsLoading","SunTimes","closeLocationSearch","closeSettingsSearch","systemTheme","App","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","catch","setCookie","maxAge","expires","document","cookie","encodeURI","getCookie","cookies","cookieName","cookieValue","decodeURI","initialState","history","JSON","parse","loadHistory","old","getOldCookie","geocodeErrorMessage","createInitialState","saveHistory","stringify","THEME_MODE_COOKIE","applyTheme","DARK_CLASS","documentElement","classList","add","remove","setInitialTheme","rootReducer","combineReducers","action","findIndex","splice","MAX_HISTORY_LENGTH","unshift","composeEnhancers","compose","createStore","applyMiddleware","thunk","ReactDOM","render","store","getElementById","URL","origin","headers","contentType","get","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.07f5140f.chunk.js","sourcesContent":["var map = {\n\t\"./clear_sky_day.svg\": 214,\n\t\"./clear_sky_night.svg\": 215,\n\t\"./cloudy.svg\": 216,\n\t\"./fog.svg\": 217,\n\t\"./half_clear_sky_day.svg\": 218,\n\t\"./half_clear_sky_night.svg\": 219,\n\t\"./heavy_rain.svg\": 220,\n\t\"./heavy_sleet.svg\": 221,\n\t\"./light_rain.svg\": 222,\n\t\"./light_sleet.svg\": 223,\n\t\"./moderate_rain.svg\": 224,\n\t\"./moderate_sleet.svg\": 225,\n\t\"./nearly_clear_sky_day.svg\": 226,\n\t\"./nearly_clear_sky_night.svg\": 227,\n\t\"./overcast.svg\": 228,\n\t\"./snow.svg\": 229,\n\t\"./sunrise.svg\": 230,\n\t\"./sunset.svg\": 231,\n\t\"./thunder.svg\": 232,\n\t\"./unknown.svg\": 233\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 213;","export default __webpack_public_path__ + \"static/media/clear_sky_day.08d2252c.svg\";","export default __webpack_public_path__ + \"static/media/clear_sky_night.529a641f.svg\";","export default __webpack_public_path__ + \"static/media/cloudy.b1731609.svg\";","export default __webpack_public_path__ + \"static/media/fog.fdf19a8b.svg\";","export default __webpack_public_path__ + \"static/media/half_clear_sky_day.89d8c1b7.svg\";","export default __webpack_public_path__ + \"static/media/half_clear_sky_night.75572318.svg\";","export default __webpack_public_path__ + \"static/media/heavy_rain.3366fbb7.svg\";","export default __webpack_public_path__ + \"static/media/heavy_sleet.fa0fb9d8.svg\";","export default __webpack_public_path__ + \"static/media/light_rain.920a6452.svg\";","export default __webpack_public_path__ + \"static/media/light_sleet.ae8a3066.svg\";","export default __webpack_public_path__ + \"static/media/moderate_rain.2a623bba.svg\";","export default __webpack_public_path__ + \"static/media/moderate_sleet.7758da5c.svg\";","export default __webpack_public_path__ + \"static/media/nearly_clear_sky_day.36e650c9.svg\";","export default __webpack_public_path__ + \"static/media/nearly_clear_sky_night.e9c1247d.svg\";","export default __webpack_public_path__ + \"static/media/overcast.a2822c8c.svg\";","export default __webpack_public_path__ + \"static/media/snow.9758315a.svg\";","export default __webpack_public_path__ + \"static/media/sunrise.0598d674.svg\";","export default __webpack_public_path__ + \"static/media/sunset.dacbfc7d.svg\";","export default __webpack_public_path__ + \"static/media/thunder.31fc6f06.svg\";","export default __webpack_public_path__ + \"static/media/unknown.791c8f32.svg\";","import React from \"react\";\nimport CSS from 'csstype'\n\nimport './style.css';\n\ninterface Props {\n    style?: CSS.Properties,\n    children?: React.ReactNode\n}\n\nconst Paper = (props: Props) => (\n    <div className=\"paper\" style={props.style}>\n        {props.children}\n    </div>\n);\n\nexport default Paper;","import React from \"react\";\nimport { Typography } from \"antd\";\n\nimport './style.css';\nimport { IWeather } from \"../../../weather/types\";\nimport { AppState } from \"../../../store\";\nimport { connect } from \"react-redux\";\n\nconst { Text } = Typography;\n\ninterface Props {\n    weather: IWeather,\n    showGust: boolean,\n    showMinMaxTemp: boolean,\n}\n\nconst WeatherCell = (props: Props) => (\n    <div className=\"weather_cell\">\n        {props.weather !== undefined &&\n            <React.Fragment>\n                {isNaN(props.weather.temperature) ?\n                    <Text>{\" \"}</Text>\n                    :\n                    (props.showMinMaxTemp && !isNaN(props.weather.temperatureMin) && !isNaN(props.weather.temperatureMax)) ?\n                        <div>\n                            <Text strong className=\"minimum\">{Math.round(props.weather.temperatureMin)}</Text>\n                            <Text type=\"secondary\" style={{ marginLeft: \"1px\", marginRight: \"1px\" }}>/</Text>\n                            <Text strong className=\"maximum\">{Math.round(props.weather.temperatureMax)}</Text>\n                            <Text strong> °C</Text>\n                        </div>\n                        :\n                        < Text strong>{Math.round(props.weather.temperature)} °C</Text>\n                }\n                {props.weather.symbol &&\n                    <img className='weather_symbol' alt=\"\" src={require(\"../../../icons3/\" + props.weather.symbol + \".svg\").default} />\n                }\n                <div>\n                    <div>\n                        {isNaN(props.weather.wind) ?\n                            <Text>{\" \"}</Text>\n                            :\n                            (props.showGust && !isNaN(props.weather.gust)) ?\n                                <React.Fragment>\n                                    <Text type=\"secondary\">{Math.round(props.weather.wind)}</Text>\n                                    <Text className=\"maximum\" type=\"secondary\" style={{ marginLeft: \"1px\", marginRight: \"1px\" }}>{\"(\" + Math.round(props.weather.gust) + \")\"}</Text>\n                                    <Text type=\"secondary\">{\"m/s\"}</Text>\n                                </React.Fragment>\n                                :\n                                <Text type=\"secondary\">{Math.round(props.weather.wind)} m/s</Text>\n                        }\n                    </div>\n                    {isNaN(props.weather.precipitation) ?\n                        <div>\n                            <Text>{\" \"}</Text>\n                        </div>\n                        :\n                        <Text type=\"secondary\">{props.weather.precipitation + \" \" + props.weather.precipitationUnit}</Text>\n                    }\n                </div>\n            </React.Fragment>\n        }\n    </div >\n);\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        showGust: state.settings.showGust,\n        showMinMaxTemp: state.settings.showMinMaxTemp,\n    }\n}\n\nexport default connect(mapStateToProps)(WeatherCell);","import React from \"react\";\nimport { Typography } from \"antd\";\n\nimport './style.css';\n\nconst { Text } = Typography;\n\ninterface Props {\n    time: string\n}\n\nconst TimeCell = (props: Props) => (\n    <div className=\"time_cell\">\n        <Text strong>{props.time}</Text>\n    </div>\n);\n\nexport default TimeCell;","import React from \"react\";\nimport Paper from \"../../atoms/Paper\";\nimport WeatherCell from \"../WeatherCell\";\nimport { Divider, Typography } from \"antd\";\nimport TimeCell from \"../TimeCell\";\nimport { IWeatherPoint, IWeatherSpan } from \"../../../weather/types\";\nimport './style.css';\n\nconst { Title } = Typography;\n\ninterface IWeatherTableListProps {\n    tableData: IWeatherSpan[] | IWeatherPoint[],\n    providers: string[],\n    name: string,\n}\n\nclass WeatherTable extends React.Component<IWeatherTableListProps> {\n    public render() {\n        return (\n            <div>\n                <Title level={4}>{this.props.name}</Title>\n                <div className=\"columns\">\n\n                    {/* Time row background */}\n                    <div className=\"right-column\">\n                        <div className=\"time-row\" style={{ width: '100%' }}>\n                            <Paper style={{ width: '100%', height: '100%' }} />\n                        </div>\n                    </div>\n\n                    {/* Weather row background. One for each provider. */}\n                    <div className=\"all-columns\">\n                        <div className=\"time-row\" />\n                        {this.props.providers.map((ignored, index) =>\n                            <div key={index} className=\"weather-row\">\n                                <Paper style={{ width: '100%', height: '100%' }} />\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Provider Name */}\n                    <div className=\"left-column\">\n                        <div className=\"time-row\" />\n                        {this.props.providers.map((provider, index) =>\n                            <div key={index} className=\"weather-row\">\n                                <Typography className=\"weather-provider-name\">\n                                    {provider}\n                                </Typography>\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Divider */}\n                    <div className=\"divider-column\">\n                        <div className=\"time-row\" />\n                        {this.props.providers.map((ignored, index) =>\n                            <div key={index} className=\"weather-row\">\n                                <Divider type=\"vertical\" style={{ height: 'calc(100% - 5px)', margin: 0 }} />\n                            </div>\n                        )}\n                    </div>\n\n                    {/* Time cells and Weather cells */}\n                    <div className=\"right-column\" style={{ overflowX: 'auto' }}>\n                        <div className=\"time-row\" style={{ justifyContent: \"space-around\" }}>\n                            {this.props.tableData.map((column: any, index) =>\n                                <TimeCell key={index} time={formatTime(column)} />\n                            )}\n                        </div>\n                        {this.props.providers.map((provider, index) =>\n                            <div key={index} className=\"weather-row\" style={{ justifyContent: \"space-around\" }}>\n                                {this.props.tableData.map((column, index) =>\n                                    <WeatherCell key={index} weather={column.weather[provider]} />\n                                )}\n                            </div>\n                        )}\n                    </div>\n                </div >\n            </div>\n        );\n    }\n}\n\nfunction formatTime(column: IWeatherPoint | IWeatherSpan): string {\n    const any: any = column;\n    if (any.date) {\n        return ('0' + any.date.getHours()).slice(-2);\n    }\n    else if (any.startDate && any.endDate) {\n        return ('0' + any.startDate.getHours()).slice(-2) + \"—\" + ('0' + any.endDate.getHours()).slice(-2);\n    }\n\n    return \"\";\n}\n\nexport default WeatherTable;","import React from \"react\";\nimport './style.css';\nimport WeatherTable from \"../WeatherTable\";\nimport { AppState } from \"../../../store\";\nimport { connect } from \"react-redux\";\nimport { ILocation } from \"../../../location/types\";\nimport { IWeatherDay, IWeatherForecast } from \"../../../weather/types\";\n\ninterface IWeatherTableListProps {\n    forecast: IWeatherForecast,\n    isLoading: boolean,\n    selectedLocation?: ILocation,\n}\n\nclass WeatherTableList extends React.Component<IWeatherTableListProps> {\n    private getTableName(index: number, date: Date | undefined): string {\n        let result = \"\";\n\n        if (!date) return result;\n\n        if (index === 0) {\n            result = \"Idag, \";\n        } else {\n            result = \"\";\n        }\n\n        switch (date.getDay()) {\n            case 1:\n                result += \"Måndag\";\n                break;\n            case 2:\n                result += \"Tisdag\";\n                break;\n            case 3:\n                result += \"Onsdag\";\n                break;\n            case 4:\n                result += \"Torsdag\";\n                break;\n            case 5:\n                result += \"Fredag\";\n                break;\n            case 6:\n                result += \"Lördag\";\n                break;\n            case 0:\n                result += \"Söndag\";\n                break;\n        }\n\n        return result;\n    }\n\n    public render() {\n        let pairs: IWeatherDay[][] = [];\n        for (let i = 0; i < this.props.forecast.days.length - 1; i += 2) {\n            pairs.push([this.props.forecast.days[i], this.props.forecast.days[i + 1]]);\n        }\n\n        return (\n            <div className=\"list\">\n                <WeatherTable tableData={this.props.forecast.hours} providers={this.props.forecast.providers} name={this.getTableName(0, this.props.forecast.hours[0].date)} />\n                {pairs.map((weatherPair, index) =>\n                    <div className=\"weather-table-pair\" key={index}>\n                        {weatherPair.map((weatherDay, index2) =>\n                            <WeatherTable\n                                key={index2}\n                                tableData={weatherDay.spans}\n                                providers={this.props.forecast.providers}\n                                name={this.getTableName(index + index2 + 1, weatherDay.spans[0].startDate)}\n                            />\n                        )}\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        forecast: state.forecasts.forecast,\n        isLoading: state.forecasts.isLoading,\n        selectedLocation: state.locationSearch.selectedLocation,\n    }\n}\n\nexport default connect(mapStateToProps)(WeatherTableList);\n","import { ILocation, IGeocodeListener } from \"./types\";\n\nlet lastSearch: string;\nlet lastSearchId: number = 0;\n\n// The minimum delay between requests to the api\nconst MIN_SEARCH_DELAY: number = 500;\n\n\n/**\n * Starts a new geocode search. The result will be returned to the listener.\n */\nexport function startGeocode(searchTerm: string, listener: IGeocodeListener): void {\n    const trimmed = searchTerm.trim()\n    if (trimmed === lastSearch) {\n        return;\n    }\n\n    lastSearch = trimmed;\n\n    if (trimmed === \"\") {\n        // Don't do an actual search if there is no search term\n        listener.onSuccess([]);\n        lastSearchId++;\n        return;\n    }\n\n    lastSearchId++;\n    let newSearchId = lastSearchId;\n\n    setTimeout(() => tryPerformSearch(newSearchId, trimmed, listener), MIN_SEARCH_DELAY);\n}\n\n\n/**\n * Returns true if the given search id is outdated.\n */\nfunction isOutdated(searchId: number): boolean {\n    return searchId !== lastSearchId;\n}\n\n\n/**\n * Fetches data from geocode api.\n */\nasync function fetchGeocodeData(searchTerm: string): Promise<Response> {\n    const key = process.env.REACT_APP_LOCATIONIQ;\n    const address = \"https://api.locationiq.com/v1/autocomplete.php\";\n\n    return fetch(`${address}?key=${key}&q=${searchTerm}&viewbox=3,44,32,71&limit=20&dedupe=1&accept-language=sv`);//&accept-language=native');\n}\n\n\n/**\n * Formats the json data from the geocode api.\n */\nfunction formatData(json: any): ILocation[] {\n    const locations: ILocation[] = []\n\n    for (const loc of json) {\n        locations.push({\n            country: loc['display_address'],\n            name: loc['display_place'],\n            lat: Number(loc['lat']),\n            long: Number(loc['lon']),\n            alt: 0,\n        });\n    }\n\n    return locations\n}\n\n\n/**\n * Tries to perform a search, but cancels if the search becomes outdated.\n */\nasync function tryPerformSearch(searchId: number, searchTerm: string, listener: IGeocodeListener) {\n    if (isOutdated(searchId)) {\n        return;\n    }\n\n    const result = await fetchGeocodeData(searchTerm);\n\n    if (isOutdated(searchId)) {\n        return;\n    }\n\n    const json = await result.json();\n\n    if (isOutdated(searchId)) {\n        return;\n    }\n\n    if (result.ok) {\n        const locations = formatData(json);\n        listener.onSuccess(locations);\n    }\n    // Returns this with a 404 status when no location found.\n    else if ( json['error'] === \"Unable to geocode\" ) {\n        const locations: ILocation[] = [];\n        listener.onSuccess(locations);\n    }\n    else {\n        // TODO: Remove console warn\n        console.warn('Geocode response error!', result.statusText);\n        listener.onAbort();\n    }\n}\n","import { ILocation } from \"../../location/types\";\n\nexport interface ILocationSearchState {\n    selectedLocation: ILocation,\n    locationHistory: ILocation[],\n\n    geocodeResults: ILocation[],\n    geocodeIsLoading: boolean,\n    geocodeErrorMessage: string,\n}\n\n// Select location\n\nexport const SELECT_LOCATION = 'SELECT_LOCATION';\n\ninterface ISelectLocationAction {\n    type: typeof SELECT_LOCATION,\n    location: ILocation\n}\n\nexport const SELECT_USER_LOCATION = \"SELECT_USER_LOCATION\";\n\ninterface ISelectUserLocation {\n    type: typeof SELECT_USER_LOCATION,\n}\n\n// Geocode\n\nexport const GEOCODE_START = 'GEOCODE_START';\n\ninterface IGeocodeStartAction {\n    type: typeof GEOCODE_START,\n}\n\nexport const GEOCODE_SUCCESS = 'GEOCODE_SUCCESS';\n\ninterface IGeocodeSuccessAction {\n    type: typeof GEOCODE_SUCCESS,\n    results: ILocation[]\n}\n\nexport const GEOCODE_FAILURE = 'GEOCODE_FAILURE';\n\ninterface IGeocodeFailureAction {\n    type: typeof GEOCODE_FAILURE,\n    errorMessage: string\n}\n\n// Types\nexport type LocationActionTypes = ISelectLocationAction | ISelectUserLocation | IGeocodeStartAction | IGeocodeSuccessAction | IGeocodeFailureAction;","import { Dispatch } from 'redux';\nimport { IGeocodeListener, ILocation } from '../../location/types';\nimport { startGeocode } from '../../location/geocoder';\nimport { SELECT_LOCATION, LocationActionTypes, GEOCODE_START, GEOCODE_SUCCESS, GEOCODE_FAILURE } from './types';\n\n\nexport function selectLocation(location: ILocation) {\n    return {\n        type: SELECT_LOCATION,\n        location: location,\n    }\n}\n\nexport const geocode = (searchString: string) => async (dispatch: Dispatch) => {\n    const onSuccess = (locations: ILocation[]) => dispatch(geocodeSuccess(locations));\n    const onFailure = () => dispatch(geocodeFailure(\"\")); // TODO: Error message\n\n    const listener: IGeocodeListener = {\n        onSuccess: onSuccess,\n        onAbort: onFailure,\n    }\n\n    dispatch(geocodeStart());\n\n    startGeocode(searchString, listener);\n}\n\nfunction geocodeStart(): LocationActionTypes {\n    return {\n        type: GEOCODE_START,\n    };\n}\n\nfunction geocodeSuccess(results: ILocation[]): LocationActionTypes {\n    return {\n        type: GEOCODE_SUCCESS,\n        results: results\n    }\n}\n\nfunction geocodeFailure(errorMessage: string): LocationActionTypes {\n    return {\n        type: GEOCODE_FAILURE,\n        errorMessage: errorMessage\n    }\n}\n","import { ILocation } from \"../location/types\";\nimport { SunTimes } from \"./sunrise\";\n\nexport interface IWeatherForecast {\n    sunTimes: SunTimes,\n    hours: IWeatherPoint[],\n    days: IWeatherDay[],\n    providers: string[],\n    location: ILocation,\n}\n\nexport interface IWeatherPoint {\n    date: Date,\n    weather: ICombinedWeather,\n}\n\nexport interface IWeatherDay {\n    spans: IWeatherSpan[],\n}\n\nexport interface IWeatherSpan {\n    startDate: Date,\n    endDate: Date,\n    weather: ICombinedWeather\n}\n\nexport interface ICombinedWeather {\n    [key: string]: IWeather,\n}\n\nexport interface IWeather {\n    temperature: number,\n    temperatureMin: number,\n    temperatureMax: number,\n    wind: number,\n    gust: number,\n    precipitation: number,\n    precipitationUnit: string,\n    symbol: WeatherIcon,\n}\n\nexport enum WeatherIcon {\n    unknown = \"unknown\",\n    // Cloudiness\n    clear_sky_day = \"clear_sky_day\",\n    clear_sky_night = \"clear_sky_night\",\n    nearly_clear_sky_day = \"nearly_clear_sky_day\",\n    nearly_clear_sky_night = \"nearly_clear_sky_night\",\n    half_clear_sky_day = \"half_clear_sky_day\",\n    half_clear_sky_night = \"half_clear_sky_night\",\n    cloudy = \"cloudy\",\n    // Rain\n    light_rain = \"light_rain\",\n    moderate_rain = \"moderate_rain\",\n    heavy_rain = \"heavy_rain\",\n    // Sleet\n    light_sleet = \"light_sleet\",\n    moderate_sleet = \"moderate_sleet\",\n    heavy_sleet = \"heavy_sleet\",\n    // Other\n    snow = \"snow\",\n    thunder = \"thunder\",\n    fog = \"fog\",\n}","import { Typography } from \"antd\";\nimport { ILocation } from \"../../../location/types\";\nimport './style.css';\n\nconst { Text } = Typography;\n\ninterface Props {\n    location: ILocation,\n    onSelect: (location: ILocation) => void,\n}\n\nconst Item = (props: Props) => (\n    <button className=\"location-list-item\" onClick={() => props.onSelect(props.location)}>\n        <Text strong>{props.location.name}</Text>\n        <Text type=\"secondary\">{props.location.country}</Text>\n    </button>\n);\n\nexport default Item;","import { IWeatherForecast } from \"../../weather/types\";\n\nexport interface IWeatherState {\n    forecast: IWeatherForecast,\n    isLoading: boolean\n    errorMessage?: string,\n}\n\nexport const FORECAST_FETCH_START = 'FORECAST_FETCH_START';\n\ninterface IFetchStartAction {\n    type: typeof FORECAST_FETCH_START,\n}\n\nexport const FORECAST_FETCH_SUCCESS = 'FORECAST_FETCH_SUCCESS';\n\ninterface IFetchSuccessAction {\n    type: typeof FORECAST_FETCH_SUCCESS,\n    forecast: IWeatherForecast,\n}\n\nexport const FORECAST_FETCH_FAILURE = 'FORECAST_FETCH_FAILURE';\n\ninterface IFetchFailureAction {\n    type: typeof FORECAST_FETCH_FAILURE,\n    errorMessage: string,\n}\n\nexport type ForecastActionTypes = IFetchStartAction | IFetchSuccessAction | IFetchFailureAction;","/**\n * Returns a list of Date objects with one hour difference, starting with the current hour.\n * @param count The number of Date objects to return.\n */\nexport function listHoursFromNow(count: number): Date[] {\n    let start = new Date();\n    start.setHours(start.getHours() + 1);\n    start.setMinutes(0);\n    start.setSeconds(0);\n    start.setMilliseconds(0);\n    return listDates(start, 3600000, count);\n}\n\n/**\n * Returns a list of Date objects with one day difference, starting with the next day.\n * @param count The number of Date objects to return.\n */\nexport function listDaysFromTomorrow(count: number): Date[] {\n    let start = new Date();\n    start.setDate(start.getDate() + 1);\n    return listDates(start, 86400000, count);\n}\n\n/**\n * Returns an array of Date objects.\n * @param start The first date in the array.\n * @param interval The time difference in milliseconds.\n * @param count The number of Date objects to return.\n */\nexport function listDates(start: Date, interval: number, count: number): Date[] {\n    let times: Date[] = []\n\n    for (let i = 0; i < count; i++) {\n        times.push(new Date(start.getTime() + (i * interval)));\n    }\n\n    return times;\n}\n\n/**\n * Returns the number of days from today to the given date.\n */\nexport function getDayOffset(date: Date) {\n    let today = new Date();\n    today.setHours(0);\n    today.setMinutes(0);\n    today.setSeconds(0);\n    today.setMilliseconds(0);\n\n    let diff = date.getTime() - today.getTime();\n\n    return Math.floor(diff / 86400000);  // 86400000 milliseconds in a day)\n}","import { listDaysFromTomorrow, listHoursFromNow } from \"../helpers/date\";\nimport { ILocation } from \"../location/types\";\nimport { getProviderNames } from \"./forecastMaker\";\nimport { SunTimes } from \"./sunrise\";\nimport { ICombinedWeather, IWeatherDay, IWeatherForecast, IWeatherPoint, IWeatherSpan, WeatherIcon } from \"./types\";\n\nexport function createEmptyForecast(location?: ILocation): IWeatherForecast {\n    const now = new Date();\n\n    return {\n        sunTimes: createEmptySunTimes(),\n        hours: createEmptyHours(),\n        days: createEmptyDays(now),\n        providers: getProviderNames(),\n        location: location ? location : { country: \"\", name: \"\", lat: NaN, long: NaN, alt: NaN },\n    };\n}\n\nfunction createEmptySunTimes(): SunTimes {\n    return {\n        sunrise: new Date(),\n        sunset: new Date(),\n    };\n}\n\nfunction createEmptyHours(): IWeatherPoint[] {\n    return listHoursFromNow(24).map((date: Date) => {\n        return {\n            date: date,\n            weather: createEmptyCombinedWeather(),\n        }\n    });\n}\n\nfunction createEmptyDays(start: Date): IWeatherDay[] {\n    return listDaysFromTomorrow(8).map((date: Date, index: number) => {\n        let spans: IWeatherSpan[] = []\n        const year = date.getUTCFullYear();\n        const month = date.getUTCMonth();\n        const day = date.getUTCDate();\n        if (index <= 4) {\n            spans = [\n                {\n                    startDate: new Date(Date.UTC(year, month, day, 0)),\n                    endDate: new Date(Date.UTC(year, month, day, 6)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 6)),\n                    endDate: new Date(Date.UTC(year, month, day, 12)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 12)),\n                    endDate: new Date(Date.UTC(year, month, day, 18)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 18)),\n                    endDate: new Date(Date.UTC(year, month, day, 24)),\n                    weather: createEmptyCombinedWeather(),\n                }\n            ]\n        }\n        else {\n            spans = [\n                {\n                    startDate: new Date(Date.UTC(year, month, day, 0)),\n                    endDate: new Date(Date.UTC(year, month, day, 12)),\n                    weather: createEmptyCombinedWeather(),\n                }, {\n                    startDate: new Date(Date.UTC(year, month, day, 12)),\n                    endDate: new Date(Date.UTC(year, month, day, 24)),\n                    weather: createEmptyCombinedWeather(),\n                }\n            ]\n        }\n\n        return {\n            spans: spans,\n        }\n    });\n}\n\nfunction createEmptyCombinedWeather(): ICombinedWeather {\n    let combined: ICombinedWeather = {};\n\n    getProviderNames().forEach(name => {\n        combined[name] = {\n            temperature: NaN,\n            temperatureMax: NaN,\n            temperatureMin: NaN,\n            wind: NaN,\n            gust: NaN,\n            precipitation: NaN,\n            precipitationUnit: \"\",\n            symbol: WeatherIcon.unknown,\n        }\n    });\n\n    return combined;\n}\n","import { ILocation } from \"../location/types\";\n\nexport interface SunTimeCallback {\n    onSuccess: (sunTimes: SunTimes) => void,\n    onError: (error: Error) => void,\n}\n\nexport interface SunTimes {\n    sunrise: Date,\n    sunset: Date,\n}\n\nexport async function getSunTimes(location: ILocation, callback: SunTimeCallback) {\n    const url = \"https://api.met.no/weatherapi/sunrise/2.0/.json\";\n    const dateString: string = (new Date()).toISOString().split('T')[0];\n\n    const request = url + \"?lat=\" + location.lat + \"&lon=\" + location.long + \"&date=\" + dateString + \"&offset=00:00\";\n\n    const result = await fetch(request);\n\n    if (result.ok) {\n        formatResponse(await result.json(), callback);\n    } else {\n        callback.onError(new Error());\n    }\n}\n\nfunction formatResponse(json: any, callback: SunTimeCallback): void {\n    try {\n        const result: SunTimes = {\n            sunrise: new Date(json.location.time[0].sunrise.time),\n            sunset: new Date(json.location.time[0].sunset.time),\n        }\n        callback.onSuccess(result);\n    } catch (e: unknown) {\n        callback.onError(e as Error);\n    }\n}","import { SunTimes } from \"./sunrise\";\nimport { WeatherIcon } from \"./types\";\n\n\n/**\n * Returns true if a given time is at night.\n */\nexport function isNight(date: Date, sunTimes: SunTimes): boolean {\n    const dateSeconds = dateToTime(date);\n    const sunRiseSeconds = dateToTime(sunTimes.sunrise);\n    const sunSetSeconds = dateToTime(sunTimes.sunset);\n\n    const result = (sunRiseSeconds > dateSeconds || dateSeconds > sunSetSeconds);\n    return result;\n}\n\n/**\n * Returns true if a given time span is at night.\n */\nexport function isSpanNight(start: Date, end: Date, sunTimes: SunTimes) {\n    const date = new Date((start.getTime() + end.getTime()) / 2);\n\n    return isNight(date, sunTimes);\n}\n\n/**\n * Returns the night version of an icon.\n */\nexport function toNight(icon: WeatherIcon): WeatherIcon {\n    switch (icon) {\n        case WeatherIcon.clear_sky_day:\n            return WeatherIcon.clear_sky_night;\n        case WeatherIcon.half_clear_sky_day:\n            return WeatherIcon.half_clear_sky_night;\n        case WeatherIcon.nearly_clear_sky_day:\n            return WeatherIcon.nearly_clear_sky_night;\n    }\n    return icon;\n}\n\n/**\n * Returns the time of the day in seconds\n */\nfunction dateToTime(date: Date): number {\n    return date.getHours() * 60 * 60 + date.getMinutes() * 60 + date.getSeconds() + date.getMilliseconds() * 1000;\n}\n","import { ILocation } from \"../../location/types\";\nimport { SunTimes } from \"../sunrise\";\nimport { IWeatherForecast } from \"../types\";\n\nexport default abstract class AbstractProvider {\n    public name: string;\n\n    protected responseJson: any;\n\n    constructor(name: string) {\n        this.name = name;\n    }\n\n    public canFillForecast(): boolean {\n        return this.responseJson !== undefined;\n    }\n\n    public async fetchForecast(location: ILocation, onSuccess: () => any, onFailure: (error: Error) => any) {\n        try {\n            // Send a request\n            let response = await this.requestData(location.lat.toString(), location.long.toString());\n\n            this.responseJson = await response.json();\n\n        } catch (e: any) {\n            this.responseJson = undefined;\n            \n            console.error(e)\n            onFailure(e);\n            return;\n        }\n\n        onSuccess()\n    }\n\n    public abstract fillForecast(forecast: IWeatherForecast, sunTimes: SunTimes): void;\n\n    protected abstract requestData(lat: string, long: string): Promise<Response>;\n}","import { isNight, isSpanNight, toNight } from \"../iconMaker\";\nimport { IWeatherForecast, WeatherIcon } from \"../types\";\nimport AbstractProvider from \"./abstractProvider\";\n\n\nexport default class MET extends AbstractProvider {\n    constructor() {\n        super(\"Yr\")\n    }\n\n    // Icon list: https://api.met.no/weatherapi/weathericon/2.0/documentation\n    private icons: any = {\n        \"clearsky\": WeatherIcon.clear_sky_day,\n        \"cloudy\": WeatherIcon.cloudy,\n        \"fair\": WeatherIcon.nearly_clear_sky_day,\n        \"fog\": WeatherIcon.fog,\n        \"heavyrain\": WeatherIcon.heavy_rain,\n        \"heavyrainandthunder\": WeatherIcon.thunder,\n        \"heavyrainshowers\": WeatherIcon.heavy_rain,\n        \"heavyrainshowersandthunder\": WeatherIcon.thunder,\n        \"heavysleet\": WeatherIcon.heavy_sleet,\n        \"heavysleetandthunder\": WeatherIcon.thunder,\n        \"heavysleetshowers\": WeatherIcon.heavy_sleet,\n        \"heavysleetshowersandthunder\": WeatherIcon.thunder,\n        \"heavysnow\": WeatherIcon.snow,\n        \"heavysnowandthunder\": WeatherIcon.thunder,\n        \"heavysnowshowers\": WeatherIcon.snow,\n        \"heavysnowshowersandthunder\": WeatherIcon.thunder,\n        \"lightrain\": WeatherIcon.light_rain,\n        \"lightrainandthunder\": WeatherIcon.thunder,\n        \"lightrainshowers\": WeatherIcon.light_rain,\n        \"lightrainshowersandthunder\": WeatherIcon.thunder,\n        \"lightsleet\": WeatherIcon.light_sleet,\n        \"lightsleetandthunder\": WeatherIcon.thunder,\n        \"lightsleetshowers\": WeatherIcon.light_sleet,\n        \"lightsnow\": WeatherIcon.snow,\n        \"lightsnowandthunder\": WeatherIcon.thunder,\n        \"lightsnowshowers\": WeatherIcon.snow,\n        \"lightssleetshowersandthunder\": WeatherIcon.thunder,\n        \"lightssnowshowersandthunder\": WeatherIcon.thunder,\n        \"partlycloudy\": WeatherIcon.half_clear_sky_day,\n        \"rain\": WeatherIcon.moderate_rain,\n        \"rainandthunder\": WeatherIcon.thunder,\n        \"rainshowers\": WeatherIcon.moderate_rain,\n        \"rainshowersandthunder\": WeatherIcon.thunder,\n        \"sleet\": WeatherIcon.moderate_sleet,\n        \"sleetandthunder\": WeatherIcon.thunder,\n        \"sleetshowers\": WeatherIcon.moderate_sleet,\n        \"sleetshowersandthunder\": WeatherIcon.thunder,\n        \"snow\": WeatherIcon.snow,\n        \"snowandthunder\": WeatherIcon.thunder,\n        \"snowshowers\": WeatherIcon.snow,\n        \"snowshowersandthunder\": WeatherIcon.thunder,\n    }\n\n    protected async requestData(lat: string, long: string): Promise<Response> {\n        const result = await fetch('https://api.met.no/weatherapi/locationforecast/2.0/complete?lat='\n            + lat + '&lon=' + long);\n\n        if (!result.ok) {\n            throw new Error(\"Weather response error! status: \" + result.status)\n        }\n\n        return result;\n    }\n\n    public fillForecast(forecast: IWeatherForecast): void {\n        const timeSeries: any[] = this.responseJson.properties.timeseries;\n\n        // --- Fill hours ---\n        let hoursIndex = 0;\n        let timeSeriesIndex = 0;\n        while (hoursIndex < forecast.hours.length && timeSeriesIndex < timeSeries.length) {\n            const timeSerie: any = timeSeries[timeSeriesIndex];\n            const timeSerieDate: Date = new Date(timeSerie.time);\n\n            // If this time serie is to old\n            if (forecast.hours[hoursIndex].date < timeSerieDate) {\n                hoursIndex++;\n                continue;\n            }\n            // If this time serie is not old enough\n            if (forecast.hours[hoursIndex].date > timeSerieDate) {\n                timeSeriesIndex++;\n                continue;\n            }\n\n            let weather = forecast.hours[hoursIndex].weather[this.name];\n\n            let symbol_str: string;\n            let precipitation: number;\n            if (timeSerie.data.next_1_hours) {\n                symbol_str = timeSerie.data.next_1_hours.summary.symbol_code;\n                precipitation = timeSerie.data.next_1_hours.details.precipitation_amount;\n            }\n            else if (timeSerie.data.next_6_hours) {\n                symbol_str = timeSerie.data.next_6_hours.summary.symbol_code;\n                precipitation = timeSerie.data.next_6_hours.details.precipitation_amount;\n            }\n            else if (timeSerie.data.next_12_hours) {\n                symbol_str = timeSerie.data.next_12_hours.summary.symbol_code;\n                precipitation = timeSerie.data.next_12_hours.details.precipitation_amount;\n            }\n            else {\n                continue;\n            }\n\n            // Remove _day or _night\n            symbol_str = symbol_str.split(\"_\")[0];\n\n            let symbol = this.icons[symbol_str] || WeatherIcon.unknown;\n            if (isNight(timeSerieDate, forecast.sunTimes)) {\n                symbol = toNight(symbol);\n            }\n\n            if (symbol === WeatherIcon.unknown) {\n                console.warn(\"Unknown symbol\", symbol_str)\n            }\n\n            weather.temperature = timeSerie.data.instant.details.air_temperature;\n            weather.wind = timeSerie.data.instant.details.wind_speed;\n            weather.gust = timeSerie.data.instant.details.wind_speed_of_gust;\n            weather.precipitation = precipitation;\n            weather.precipitationUnit = \"mm\";\n            weather.symbol = symbol;\n\n            timeSeriesIndex++;\n            hoursIndex++;\n        }\n\n        // --- Fill days ---\n        timeSeriesIndex = 0;\n        for (let i = 0; i < forecast.days.length; i++) {\n            const day = forecast.days[i];\n            for (let j = 0; j < day.spans.length; j++) {\n\n                if (timeSeriesIndex >= timeSeries.length) {\n                    break;\n                }\n\n                const span = day.spans[j];\n                const timeSerie = timeSeries[timeSeriesIndex];\n                const timeSerieDate: Date = new Date(timeSerie.time);\n\n                // If this time serie is to old\n                if (span.startDate < timeSerieDate) {\n                    continue;\n                }\n                // If this time serie is not old enough\n                if (span.startDate > timeSerieDate) {\n                    timeSeriesIndex++;\n                    j--;\n                    continue;\n                }\n\n                let weather = span.weather[this.name];\n\n                // Get span length in hours\n                const spanLength = (span.endDate.getTime() - span.startDate.getTime()) / (1000 * 60 * 60);\n\n                let symbol_str: string;\n                let precipitation: number;\n                let minTemp: number;\n                let maxTemp: number;\n                if (spanLength === 6) {\n                    symbol_str = timeSerie.data.next_6_hours.summary.symbol_code;\n                    precipitation = timeSerie.data.next_6_hours.details.precipitation_amount;\n                    minTemp = timeSerie.data.next_6_hours.details.air_temperature_min;\n                    maxTemp = timeSerie.data.next_6_hours.details.air_temperature_max;\n                }\n                else if (spanLength === 12) {\n                    const nextTimeSerie = timeSeries[timeSeriesIndex + 1];\n\n                    symbol_str = timeSerie.data.next_12_hours.summary.symbol_code;\n\n                    const pThis = timeSerie.data.next_6_hours.details.precipitation_amount;\n                    const pNext = nextTimeSerie.data.next_6_hours.details.precipitation_amount;\n\n                    precipitation = Math.round(10 * ((pThis + pNext) / 12)) / 10;\n\n                    minTemp = Math.min(timeSerie.data.next_6_hours.details.air_temperature_min, nextTimeSerie.data.next_6_hours.details.air_temperature_min);\n                    maxTemp = Math.max(timeSerie.data.next_6_hours.details.air_temperature_max, nextTimeSerie.data.next_6_hours.details.air_temperature_max);\n                }\n                else {\n                    console.warn(\"Unknown span length\", spanLength)\n                    timeSeriesIndex++;\n                    continue;\n                }\n\n                // Remove _day or _night\n                symbol_str = symbol_str.split(\"_\")[0];\n\n                let symbol = this.icons[symbol_str] || WeatherIcon.unknown;\n                if (isSpanNight(span.startDate, span.endDate, forecast.sunTimes)) {\n                    symbol = toNight(symbol);\n                }\n\n                if (symbol === WeatherIcon.unknown) {\n                    console.warn(\"Unknown symbol\", symbol_str)\n                }\n\n                weather.temperature = (maxTemp + minTemp) / 2;\n                weather.temperatureMax = maxTemp;\n                weather.temperatureMin = minTemp;\n                weather.wind = timeSerie.data.instant.details.wind_speed; // TODO: Find max wind speed\n                weather.gust = timeSerie.data.instant.details.wind_speed_of_gust; // TODO: Find max gust speed\n                weather.precipitation = precipitation;\n                weather.precipitationUnit = \"mm\";\n                weather.symbol = symbol;\n\n                timeSeriesIndex++;\n            }\n        }\n    }\n}","import { isNight, isSpanNight, toNight } from \"../iconMaker\";\nimport { SunTimes } from \"../sunrise\";\nimport { IWeather, IWeatherForecast, WeatherIcon } from \"../types\";\nimport AbstractProvider from \"./abstractProvider\";\n\n\nexport default class SMHI extends AbstractProvider {\n    constructor() {\n        super(\"SMHI\")\n    }\n\n    // Weather parameter descriptions can be found at:\n    // https://opendata.smhi.se/apidocs/metfcst/parameters.html#parameter-table\n    private icons = {\n        1: WeatherIcon.clear_sky_day,        // Clear sky\n        2: WeatherIcon.nearly_clear_sky_day, // Nearly clear sky\n        3: WeatherIcon.half_clear_sky_day,   // Variable cloudiness\n        4: WeatherIcon.half_clear_sky_day,   // Half clear sky\n        5: WeatherIcon.cloudy,               // Cloudy sky\n        6: WeatherIcon.cloudy,               // Overcast\n        7: WeatherIcon.fog,                  // Fog\n        8: WeatherIcon.light_rain,           // Light rain showers\n        9: WeatherIcon.moderate_rain,        // Moderate rain showers\n        10: WeatherIcon.heavy_rain,          // Heavy rain showers\n        11: WeatherIcon.thunder,             // Thunderstorm\n        12: WeatherIcon.light_sleet,         // Light sleet showers\n        13: WeatherIcon.moderate_sleet,      // Moderate sleet showers\n        14: WeatherIcon.heavy_sleet,         // Heavy sleet showers\n        15: WeatherIcon.snow,                // Light snow showers\n        16: WeatherIcon.snow,                // Moderate snow showers\n        17: WeatherIcon.snow,                // Heavy snow showers\n        18: WeatherIcon.light_rain,          // Light rain\n        19: WeatherIcon.moderate_rain,       // Moderate rain\n        20: WeatherIcon.heavy_rain,          // Heavy rain\n        21: WeatherIcon.thunder,             // Thunder\n        22: WeatherIcon.light_sleet,         // Light sleet\n        23: WeatherIcon.moderate_sleet,      // Moderate sleet\n        24: WeatherIcon.heavy_sleet,         // Heavy sleet\n        25: WeatherIcon.snow,                // Light snowfall\n        26: WeatherIcon.snow,                // Moderate snowfall\n        27: WeatherIcon.snow,                // Heavy snowfall\n    }\n\n    private getIcon(value: never): WeatherIcon {\n        let icon = this.icons[value];\n        if (!icon) {\n            console.warn(\"Unknown symbol value\", value)\n            return WeatherIcon.unknown;\n        }\n        return icon;\n    }\n\n    protected async requestData(lat: string, long: string): Promise<Response> {\n        const max = 9; // the maximum precision allowed by the api (including decimal point)\n        const result = await fetch('https://opendata-download-metfcst.smhi.se/api/category/pmp3g/version/2/geotype/point/lon/'\n            + long.substr(0, max) + '/lat/' + lat.substr(0, max) + '/data.json');\n\n        if (!result.ok) {\n            throw new Error(\"Weather response error! status: ' + result.status\")\n        }\n\n        return result;\n    }\n\n    public fillForecast(forecast: IWeatherForecast): void {\n        const timeSeries: [] = this.responseJson['timeSeries'];\n\n        // --- Fill hours ---\n        let hoursIndex = 0;\n        let timeSeriesIndex = 0;\n        while (hoursIndex < forecast.hours.length && timeSeriesIndex < timeSeries.length) {\n            const timeSerie: any = timeSeries[timeSeriesIndex];\n            const timeSerieDate = new Date(timeSerie.validTime);\n\n            // If this time serie is to old\n            if (forecast.hours[hoursIndex].date < timeSerieDate) {\n                hoursIndex++;\n                continue;\n            }\n            // If this time serie is not old enough\n            if (forecast.hours[hoursIndex].date > timeSerieDate) {\n                timeSeriesIndex++;\n                continue;\n            }\n\n            const parameters: any[] = timeSerie.parameters;\n\n            let weather = forecast.hours[hoursIndex].weather[this.name];\n\n            //fillSingleWeather(parameters, weather);\n\n            weather.temperature = parameters.find(e => e.name === \"t\").values[0];\n            weather.precipitation = parameters.find(e => e.name === \"pmean\").values[0];\n            weather.precipitationUnit = \"mm\";\n            weather.wind = parameters.find(e => e.name === \"ws\").values[0];\n            weather.gust = parameters.find(e => e.name === \"gust\").values[0];\n            weather.symbol = this.getIcon(parameters.find(e => e.name === \"Wsymb2\").values[0] as never)\n\n            if (isNight(timeSerieDate, forecast.sunTimes)) {\n                weather.symbol = toNight(weather.symbol);\n            }\n\n            hoursIndex++;\n            timeSeriesIndex++;\n        }\n\n        // --- Fill days ---\n        timeSeriesIndex = 0;\n        for (let i = 0; i < forecast.days.length; i++) {\n            const day = forecast.days[i];\n            for (let j = 0; j < day.spans.length; j++) {\n\n                const span = day.spans[j];\n                const timeSerie: any = timeSeries[timeSeriesIndex];\n                const timeSerieDate: Date = new Date(timeSerie.validTime);\n\n                // If this time serie is to old\n                if (span.startDate < timeSerieDate) {\n                    continue;\n                }\n                // If this time serie is not old enough\n                if (span.startDate > timeSerieDate) {\n                    timeSeriesIndex++;\n                    j--;\n                    continue;\n                }\n\n                let weather = span.weather[this.name];\n\n                const iconDate = new Date((span.startDate.getTime() + span.endDate.getTime()) / 2);\n\n                timeSeriesIndex = this.sumWeather(timeSeries, timeSeriesIndex, span.endDate, iconDate, weather, forecast.sunTimes);\n            }\n        }\n    }\n\n    /**\n     * Sums the weather in a time series from an index up to an end date.\n     * The weather will be added to the given weather object.\n     * The index of the end date will be returned.\n     * @returns Index of the end date.\n     */\n    private sumWeather(timeSeries: any[], startIndex: number, endDate: Date, symbolDate: Date, weather: IWeather, sunTimes: SunTimes): number {\n        let index = startIndex;\n\n        let totalPrecipitation = 0;\n        let minTemp: number = NaN;\n        let maxTemp: number = NaN;\n        let maxWind: number = 0;\n        let maxGust: number = 0;\n        let symbols: { [key: number]: number } = {}\n\n        while (index < timeSeries.length) {\n            const timeSerie = timeSeries[index];\n            const timeSerieDate: Date = new Date(timeSerie.validTime);\n\n            if (timeSerieDate > endDate) {\n                index--\n                break;\n            }\n\n            const parameters: any[] = timeSerie.parameters;\n\n            // Precipitation\n            totalPrecipitation += parameters.find(e => e.name === \"pmean\").values[0];\n\n            // Temperature\n            const temp = parameters.find(e => e.name === \"t\").values[0];\n            if (isNaN(minTemp) || temp < minTemp) {\n                minTemp = temp;\n            }\n            if (isNaN(maxTemp) || temp > maxTemp) {\n                maxTemp = temp;\n            }\n            // Wind\n            const wind = parameters.find(e => e.name === \"ws\").values[0];\n            if (wind > maxWind) {\n                maxWind = wind;\n            }\n            // Gust\n            const gust = parameters.find(e => e.name === \"gust\").values[0];\n            if (gust > maxGust) {\n                maxGust = gust;\n            }\n            //= parameters.find(e => e.name === \"pmean\").values[0];\n            //= parameters.find(e => e.name === \"ws\").values[0];\n            //= parameters.find(e => e.name === \"gust\").values[0];\n            //= this.getIcon(parameters.find(e => e.name === \"Wsymb2\").values[0] as never, timeSerieDate)\n\n            const symbol: number = parameters.find(e => e.name === \"Wsymb2\").values[0];\n            if (symbol in symbols) {\n                symbols[symbol] += 1;\n            } else {\n                symbols[symbol] = 1;\n            }\n\n            index++;\n        }\n\n        weather.precipitation = Math.round(10 * totalPrecipitation) / 10;\n        weather.precipitationUnit = \"mm\";\n        weather.temperatureMax = maxTemp;\n        weather.temperatureMin = minTemp;\n        weather.temperature = (maxTemp + minTemp) / 2;\n        weather.wind = maxWind;\n        weather.gust = maxGust;\n\n        let maxSymbolCount = 0;\n        let maxSymbol = \"\";\n        for (let symbol in symbols) {\n            const symbolCount = symbols[symbol];\n            if (symbolCount > maxSymbolCount) {\n                maxSymbolCount = symbolCount;\n                maxSymbol = symbol;\n            }\n        }\n\n        weather.symbol = this.getIcon(maxSymbol as never);\n\n        if (isSpanNight(new Date(timeSeries[startIndex].validTime), endDate, sunTimes)) {\n            weather.symbol = toNight(weather.symbol);\n        }\n\n        return index;\n    }\n}\n","import { createEmptyForecast } from \"./emptyForecast\";\nimport { ILocation } from \"../location/types\";\nimport { getSunTimes, SunTimeCallback, SunTimes } from \"./sunrise\";\nimport { IWeatherForecast } from \"./types\";\nimport AbstractProvider from \"./weatherProviders/abstractProvider\";\nimport MET from \"./weatherProviders/MET\";\nimport SMHI from \"./weatherProviders/SMHI\";\n\nconst weatherProviders: AbstractProvider[] = [new SMHI(), new MET()];\n\n/**\n * Returns an array with the name of the weather providers\n */\nexport function getProviderNames(): string[] {\n    return weatherProviders.map((provider) => { return provider.name });\n}\n\nexport interface forecastCallback {\n    onSuccess: (forecast: IWeatherForecast) => void,\n}\n\n/**\n * Makes a new forecast that is returned with a callback.\n * @param location Location for the forecast.\n * @param callback Callback when done.\n */\nexport async function newForecast(location: ILocation, callback: forecastCallback): Promise<void> {\n    /**\n     * Create an empty forecast. Fetch the sun times. Also make each weather provider fetch weather data.\n     * When the provider has gotten its response, let that provider fill in its data in the forecast.\n     * If the fetch request for a weather provider is done before the sun times. The provider will be put\n     * in a waiting list and fills in the weather data when the sun times has been fetched.\n     */\n\n    const forecast = createEmptyForecast(location);\n\n    let sunTimesDone = false;\n    let sunTimes: SunTimes;\n\n    let remainingProviders = weatherProviders.length; // Number of providers waiting for a fetch response.\n    let waitingProviders: AbstractProvider[] = [];\n\n    const onProviderResponse = (provider: AbstractProvider) => {\n        if (!sunTimesDone) {\n            waitingProviders.push(provider);\n            return;\n        }\n\n        if (provider.canFillForecast()) {\n            provider.fillForecast(forecast, sunTimes)\n        }\n\n        remainingProviders--;\n        if (remainingProviders === 0) {\n            callback.onSuccess(forecast);\n        }\n    };\n\n    const onSunTimesResponse = (sunTimesResponse: SunTimes) => {\n        sunTimes = sunTimesResponse;\n        sunTimesDone = true;\n\n        forecast.sunTimes = sunTimesResponse;\n\n        waitingProviders.forEach(provider => {\n            onProviderResponse(provider);\n        });\n    };\n\n    const sunTimeCallback: SunTimeCallback = {\n        onSuccess: (response: SunTimes) => {\n            onSunTimesResponse(response);\n        },\n        onError: (error: Error) => {\n            onSunTimesResponse({ sunrise: new Date(), sunset: new Date() });\n        },\n    };\n\n    // Start sun times fetch request.\n    getSunTimes(location, sunTimeCallback);\n\n    // Start provider fetch requests.\n    weatherProviders.forEach(provider => {\n        provider.fetchForecast(\n            location,\n            () => { onProviderResponse(provider) },\n            (error: Error) => { onProviderResponse(provider) }\n        );\n    });\n}\n\n","import { ForecastActionTypes, FORECAST_FETCH_START, FORECAST_FETCH_SUCCESS, FORECAST_FETCH_FAILURE } from \"./types\";\nimport { Dispatch } from \"redux\";\nimport { ILocation } from \"../../location/types\";\nimport { IWeatherForecast } from \"../../weather/types\";\nimport { forecastCallback, newForecast } from \"../../weather/forecastMaker\";\n\nfunction searchStart(): ForecastActionTypes {\n    return {\n        type: FORECAST_FETCH_START,\n    }\n}\n\nfunction searchSuccess(forecast: IWeatherForecast): ForecastActionTypes {\n    return {\n        type: FORECAST_FETCH_SUCCESS,\n        forecast: forecast,\n    }\n}\n\nfunction searchFailure(errorMessage: string): ForecastActionTypes {\n    return {\n        type: FORECAST_FETCH_FAILURE,\n        errorMessage: errorMessage,\n    }\n}\n\nexport const fetchForecasts = (location: ILocation) => async (dispatch: Dispatch) => {\n    const callback: forecastCallback = {\n        onSuccess: (forecast: IWeatherForecast) => dispatch(searchSuccess(forecast)),\n    }\n\n    dispatch(searchStart());\n    newForecast(location, callback);\n}\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectLocation } from \"../../../store/locationSearch/actions\";\nimport { AppState } from \"../../../store\";\nimport LocationSearchItem from \"../LocationSearchItem\";\nimport { Divider } from \"antd\";\nimport { fetchForecasts } from \"../../../store/forecasts/actions\";\nimport \"./style.css\";\nimport { ILocation } from \"../../../location/types\";\n\ninterface ILocationSearchListProps {\n    selectLocation: (location: ILocation) => void,\n    fetchForecasts: (location: ILocation) => void,\n    onSelect: () => void,\n    showHistory: boolean,\n    locationResults: ILocation[],\n    locationHistory: ILocation[],\n    selectedLocation?: ILocation,\n}\n\nclass LocationSearchList extends React.Component<ILocationSearchListProps>{\n\n    private onLocationSelect(location: ILocation): void {\n        // Select location and fetch forecast if it is a new location\n        if (location.country !== this.props.selectedLocation?.country) {\n            this.props.selectLocation(location);\n            this.props.fetchForecasts(location);\n        }\n        this.props.onSelect();\n    }\n\n    render() {\n        const locations: ILocation[] = this.props.showHistory ? this.props.locationHistory : this.props.locationResults;\n\n        return (\n            <div className=\"location-list\">\n                {locations.map((location, index) =>\n                    <React.Fragment key={index}>\n                        <LocationSearchItem location={location} onSelect={location => this.onLocationSelect(location)} />\n                        <Divider style={{ margin: 0 }} />\n                    </React.Fragment>\n                )}\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        locationResults: state.locationSearch.geocodeResults,\n        locationHistory: state.locationSearch.locationHistory,\n        selectedLocation: state.locationSearch.selectedLocation,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        selectLocation: (location: ILocation) => dispatch(selectLocation(location)),\n        fetchForecasts: (location: ILocation) => dispatch(fetchForecasts(location)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationSearchList);","import { Button, Divider, Input, Spin } from \"antd\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { SearchOutlined } from '@ant-design/icons';\nimport { AppState } from \"../../../store\";\nimport LocationSearchList from \"../LocationSearchList\";\nimport './style.css';\nimport { geocode } from \"../../../store/locationSearch/actions\";\n\ninterface ILocationSearchProps {\n    searchLocations: (searchTerm: string) => void,\n    isLoading: boolean,\n    close: () => void,\n}\n\ninterface ILocationSearchState {\n    showHistory: boolean,\n}\n\nclass LocationSearch extends React.Component<ILocationSearchProps, ILocationSearchState>{\n    constructor(props: Readonly<ILocationSearchProps>) {\n        super(props)\n\n        this.state = {\n            showHistory: true,\n        }\n    }\n\n    private onChange(text: string) {\n        this.props.searchLocations(text);\n\n        const show = text.length === 0;\n\n        if (show !== this.state.showHistory) {\n            this.setState({\n                ...this.state,\n                showHistory: show,\n            });\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"search\">\n                <div className=\"search-bar\">\n                    <Input\n                        className=\"search-input\"\n                        size=\"large\"\n                        bordered={false}\n                        placeholder=\"Sök\"\n                        autoFocus\n                        allowClear\n                        prefix={<SearchOutlined />}\n                        onChange={value => this.onChange(value.target.value)}\n                    />\n                    <Button className=\"search-cancel-button\" size=\"large\" ghost onClick={() => this.props.close()}>Avbryt</Button>\n                </div>\n                <Divider style={{ margin: 0 }} />\n                {this.props.isLoading ?\n                    <Spin className=\"location-search-spin\" />\n                    :\n                    <LocationSearchList onSelect={() => this.props.close()} showHistory={this.state.showHistory} />\n                }\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        isLoading: state.locationSearch.geocodeIsLoading,\n    }\n}\n\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        searchLocations: (searchTerm: string) => dispatch(geocode(searchTerm)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LocationSearch);","import React from \"react\";\nimport './style.css';\nimport { Button, Divider, Typography } from \"antd\";\n\nconst { Title } = Typography;\n\ninterface IHeaderProps {\n    backButton?: () => void,\n    backButtonName?: string;\n    title: string;\n}\n\nexport default class Header extends React.Component<IHeaderProps>{\n    render() {\n        return (\n            <div className=\"header-container\">\n                <div className=\"header-grid\">\n                    <Title className=\"header-title\" level={5}>\n                        {this.props.title}\n                    </Title>\n                    {this.props.backButton &&\n                        <Button\n                            className=\"header-back-button\"\n                            onClick={() => this.props.backButton ? this.props.backButton() : {}}\n                            size=\"large\"\n                            ghost\n                        >\n                            {this.props.backButtonName}\n                        </Button>\n                    }\n                </div>\n                <Divider className=\"header-divider\" />\n            </div>\n        );\n    }\n}\n","\nexport interface ISettingsState {\n    themeMode: ThemeModeTypes,\n    systemTheme: ThemeTypes,\n    theme: ThemeTypes,\n    showGust: boolean,\n    showMinMaxTemp: boolean,\n}\n\nexport type SettingTypes = {\n    [key in keyof ISettingsState]?: ISettingsState[key];\n};\n\n// Theme mode\n\nexport type ThemeModeTypes = \"light\" | \"dark\" | \"system\";\n\nexport const UPDATE_THEME_MODE = \"UPDATE_THEME_MODE\";\n\ninterface IThemeModeAction {\n    type: typeof UPDATE_THEME_MODE,\n    themeMode: ThemeModeTypes,\n}\n\n\n// Theme\nexport type ThemeTypes = \"light\" | \"dark\";\n\n// System theme\n\nexport const UPDATE_SYSTEM_THEME = \"UPDATE_SYSTEM_THEME\";\n\ninterface IUpdateSystemThemeAction {\n    type: typeof UPDATE_SYSTEM_THEME,\n    systemTheme: ThemeTypes,\n}\n\n\n\n// Settings\nexport const UPDATE_SETTING = \"UPDATE_SETTING\";\n\ninterface IUpdateSetting {\n    type: typeof UPDATE_SETTING,\n    setting: SettingTypes,\n}\n\n\nexport type SettingsActionTypes = IThemeModeAction | IUpdateSystemThemeAction | IUpdateSetting;\n","import React from \"react\";\nimport './style.css';\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../store\";\nimport Header from \"../../atoms/Header\";\nimport { Divider, Radio, Space, Switch, Typography } from \"antd\";\nimport { SettingTypes, ThemeModeTypes } from \"../../../store/settings/types\";\nimport { updateSetting as updateSettings, updateThemeMode } from \"../../../store/settings/actions\";\n\nconst { Text } = Typography;\n\ninterface ISettingsPageProps {\n    theme: ThemeModeTypes,\n    showGust: boolean,\n    showMinMaxTemp: boolean,\n    updateThemeMode: (theme: ThemeModeTypes) => void,\n    updateSettings: (setting: SettingTypes) => void,\n    close: () => void,\n}\n\n\nclass SettingsPage extends React.Component<ISettingsPageProps>{\n    private onThemeChange(value: number) {\n        switch (value) {\n            case 1:\n                this.props.updateThemeMode(\"light\");\n                break;\n            case 2:\n                this.props.updateThemeMode(\"dark\");\n                break;\n            case 3:\n                this.props.updateThemeMode(\"system\");\n                break;\n        }\n    }\n\n    render() {\n        let themeValue;\n        switch (this.props.theme) {\n            case \"light\":\n                themeValue = 1;\n                break;\n            case \"dark\":\n                themeValue = 2;\n                break;\n            case \"system\":\n                themeValue = 3;\n                break;\n        }\n\n        return (\n            <div className=\"settings-page\">\n                <Header title=\"Inställningar\" backButton={() => this.props.close()} backButtonName=\"Klar\" />\n\n                <div className=\"settings-content\">\n                    <div>\n                        <Text className=\"settings-options-title\" type=\"secondary\" strong>Utseende</Text>\n                        <Divider />\n                        <Radio.Group className=\"settings-options\" value={themeValue} onChange={(e) => this.onThemeChange(e.target.value)}>\n                            <Space direction=\"vertical\">\n                                <Radio value={1}>Ljust</Radio>\n                                <Divider />\n                                <Radio value={2}>Mörkt</Radio>\n                                <Divider />\n                                <Radio value={3}>Följ System</Radio>\n                            </Space>\n                        </Radio.Group>\n                        <Divider />\n\n                        <Text className=\"settings-options-title\" type=\"secondary\" strong>Väder</Text>\n                        <Divider />\n                        <div className=\"settings-options\">\n                            <Space direction=\"vertical\">\n                                <div className=\"settings-row\">\n                                    <Text>Visa min/max temperatur</Text>\n                                    <Switch checked={this.props.showMinMaxTemp} onChange={(status) => this.props.updateSettings({ showMinMaxTemp: status })} />\n                                </div>\n                                <Divider />\n                                <div className=\"settings-row\">\n                                    <Text>Visa byvind</Text>\n                                    <Switch checked={this.props.showGust} onChange={(status) => this.props.updateSettings({ showGust: status })} />\n                                </div>\n                            </Space>\n                        </div>\n                        <Divider />\n                    </div>\n\n                    <a id=\"privacy-policy\" href=\"https://regnkollen.se/privacy-policy.html\" target=\"_blank\" rel=\"noreferrer\">privacy policy</a >\n                </div>\n            </div>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        theme: state.settings.themeMode,\n        showGust: state.settings.showGust,\n        showMinMaxTemp: state.settings.showMinMaxTemp,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        updateThemeMode: (theme: ThemeModeTypes) => dispatch(updateThemeMode(theme)),\n        updateSettings: (setting: SettingTypes) => dispatch(updateSettings(setting)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsPage);\n","var _metadata;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSunrise(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"27.043mm\",\n    height: \"19.318mm\",\n    viewBox: \"0 0 27.043 19.318\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _metadata || (_metadata = /*#__PURE__*/React.createElement(\"metadata\", null, /*#__PURE__*/React.createElement(\"rdfRDF\", null, /*#__PURE__*/React.createElement(\"ccWork\", null, /*#__PURE__*/React.createElement(\"dcformat\", null, \"image/svg+xml\"))))), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(267.35 -206.24)\",\n    fill: \"currentColor\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(.5 0 0 1 -395.11 104.26)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(.5 0 0 1 -414.16 104.26)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(.35355 .35355 -.70711 .70711 -284.41 25.175)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(-.35355 .35355 -.70711 -.70711 -57.66 190.76)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m-266.53 224.75h25.4\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 1.6203,\n    style: {\n      paintOrder: \"normal\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m-253.83 215.52a5.8207 5.8208 0 0 0-5.8208 5.8208 5.8207 5.8208 0 0 0 0.22167 1.587h11.194a5.8207 5.8208 0 0 0 0.22582-1.587 5.8207 5.8208 0 0 0-5.8203-5.8208z\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 0.79375,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m-253.84 206.24a0.81024 0.81024 0 0 0-0.56277 0.2367l-1.0583 1.0583a0.81024 0.81024 0 0 0-0.0692 0.076l-1.1958 1.1958a0.8102 0.4051 45 1 0 1.1452 1.1451l0.94207-0.94205v2.2774a0.81024 0.81024 0 0 0 0 0.0806v2.0366a0.8102 0.4051 0 1 0 1.619 0v-3.176a0.8102 0.4051 0 0 0 0-0.0201v-1.201l0.94414 0.94414a0.4051 0.8102 45 1 0 1.1452-1.1451l-1.2077-1.2077a0.81024 0.81024 0 0 0-0.0594-0.0636l-1.0583-1.0583a0.81024 0.81024 0 0 0-0.58394-0.23669z\",\n    color: \"currentColor\",\n    colorRendering: \"auto\",\n    dominantBaseline: \"auto\",\n    imageRendering: \"auto\",\n    shapeRendering: \"auto\",\n    \"solid-color\": \"currentColor\",\n    style: {\n      fontFeatureSettings: \"normal\",\n      fontVariantAlternates: \"normal\",\n      fontVariantCaps: \"normal\",\n      fontVariantLigatures: \"normal\",\n      fontVariantNumeric: \"normal\",\n      fontVariantPosition: \"normal\",\n      isolation: \"auto\",\n      mixBlendMode: \"normal\",\n      paintOrder: \"markers fill stroke\",\n      shapePadding: 0,\n      textDecorationColor: \"currentColor\",\n      textDecorationLine: \"none\",\n      textDecorationStyle: \"solid\",\n      textIndent: 0,\n      textOrientation: \"mixed\",\n      textTransform: \"none\",\n      whiteSpace: \"normal\"\n    }\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSunrise);\nexport default __webpack_public_path__ + \"static/media/sunrise.0598d674.svg\";\nexport { ForwardRef as ReactComponent };","import { SettingTypes, ThemeModeTypes, ThemeTypes, UPDATE_SETTING, UPDATE_SYSTEM_THEME, UPDATE_THEME_MODE } from './types';\n\n\nexport function updateThemeMode(themeMode: ThemeModeTypes) {\n    return {\n        type: UPDATE_THEME_MODE,\n        themeMode: themeMode,\n    }\n}\n\nexport function updateSystemTheme(systemTheme: ThemeTypes) {\n    return {\n        type: UPDATE_SYSTEM_THEME,\n        systemTheme: systemTheme,\n    }\n}\n\nexport function updateSetting(setting: SettingTypes) {\n    return {\n        type: UPDATE_SETTING,\n        setting: setting,\n    }\n}\n","var _metadata;\n\nvar _excluded = [\"title\", \"titleId\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nfunction SvgSunset(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    width: \"27.043mm\",\n    height: \"19.318mm\",\n    viewBox: \"0 0 27.043 19.318\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _metadata || (_metadata = /*#__PURE__*/React.createElement(\"metadata\", null, /*#__PURE__*/React.createElement(\"rdfRDF\", null, /*#__PURE__*/React.createElement(\"ccWork\", null, /*#__PURE__*/React.createElement(\"dcFormat\", null, \"image/svg+xml\"))))), /*#__PURE__*/React.createElement(\"g\", {\n    transform: \"translate(291.71 -197.38)\",\n    fill: \"currentColor\"\n  }, /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m-278.19 206.66a5.8207 5.8208 0 0 0-5.8208 5.8208 5.8207 5.8208 0 0 0 0.22167 1.587h11.194a5.8207 5.8208 0 0 0 0.22582-1.587 5.8207 5.8208 0 0 0-5.8203-5.8208z\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 0.79375,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(.5 0 0 1 -419.48 95.401)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(.5 0 0 1 -438.53 95.401)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(.35355 .35355 -.70711 .70711 -308.78 16.318)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    transform: \"matrix(-.35355 .35355 -.70711 -.70711 -82.024 181.9)\",\n    d: \"m298.45 117.08h6.35\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeWidth: 1.6202,\n    style: {\n      paintOrder: \"markers fill stroke\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m-290.89 215.89h25.4\",\n    stroke: \"currentColor\",\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    strokeWidth: 1.6203,\n    style: {\n      paintOrder: \"normal\"\n    }\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"m-278.2 204.97a0.81024 0.81024 0 0 1-0.56277-0.2367l-1.0583-1.0583a0.81024 0.81024 0 0 1-0.0692-0.076l-1.1958-1.1958a0.4051 0.8102 45 1 1 1.1452-1.1451l0.94207 0.94205v-2.2774a0.81024 0.81024 0 0 1 0-0.0806v-2.0366a0.8102 0.4051 0 1 1 1.619 0v3.176a0.8102 0.4051 0 0 1 0 0.0201v1.201l0.94414-0.94414a0.8102 0.4051 45 1 1 1.1452 1.1451l-1.2077 1.2077a0.81024 0.81024 0 0 1-0.0594 0.0636l-1.0583 1.0583a0.81024 0.81024 0 0 1-0.58394 0.23669z\",\n    color: \"currentColor\",\n    colorRendering: \"auto\",\n    dominantBaseline: \"auto\",\n    imageRendering: \"auto\",\n    shapeRendering: \"auto\",\n    \"solid-color\": \"currentColor\",\n    style: {\n      fontFeatureSettings: \"normal\",\n      fontVariantAlternates: \"normal\",\n      fontVariantCaps: \"normal\",\n      fontVariantLigatures: \"normal\",\n      fontVariantNumeric: \"normal\",\n      fontVariantPosition: \"normal\",\n      isolation: \"auto\",\n      mixBlendMode: \"normal\",\n      paintOrder: \"markers fill stroke\",\n      shapePadding: 0,\n      textDecorationColor: \"currentColor\",\n      textDecorationLine: \"none\",\n      textDecorationStyle: \"solid\",\n      textIndent: 0,\n      textOrientation: \"mixed\",\n      textTransform: \"none\",\n      whiteSpace: \"normal\"\n    }\n  })));\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSunset);\nexport default __webpack_public_path__ + \"static/media/sunset.dacbfc7d.svg\";\nexport { ForwardRef as ReactComponent };","import { Typography } from \"antd\";\nimport Icon from \"@ant-design/icons\";\nimport {ReactComponent as SunRise} from \"../../../icons3/sunrise.svg\";\nimport {ReactComponent as SunSet} from \"../../../icons3/sunset.svg\";\nimport './style.css';\nimport { SunTimes } from \"../../../weather/sunrise\";\nimport { AppState } from \"../../../store\";\nimport { connect } from \"react-redux\";\n\nconst { Text } = Typography;\n\ninterface Props {\n    sunTimes: SunTimes,\n}\n\nconst SunTimesText = (props: Props) => (\n    <div className=\"sun-times-container\">\n        <div className=\"sun-times-column\">\n            <Icon className=\"sun-time-icon\" component={SunRise}/>\n            <Text type=\"secondary\">{formatTime(props.sunTimes.sunrise)}</Text>\n        </div>\n        <div className=\"sun-times-column\">\n            <Icon className=\"sun-time-icon\" component={SunSet}/>\n            <Text type=\"secondary\">{formatTime(props.sunTimes.sunset)}</Text>\n        </div>\n    </div >\n);\n\nfunction formatTime(time: Date): string {\n    return time.getHours().toString().padStart(2, '0') + ':' + time.getMinutes().toString().padStart(2, '0');\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        sunTimes: state.forecasts.forecast.sunTimes,\n    }\n}\n\nexport default connect(mapStateToProps)(SunTimesText);","\nimport { ILocation, IUserPositionListener } from \"./types\";\n\n/**\n * Tries to find the users position and returns it to the listener.\n */\nexport function startGeolocate(listener: IUserPositionListener) {\n    const successCallback: PositionCallback = (position) => geocodeCoordinates(position.coords, listener);\n\n    const errorCallback: PositionErrorCallback = (error) => {\n        // TODO\n    };\n\n    navigator.geolocation.getCurrentPosition(successCallback, errorCallback);\n}\n\n/**\n * Converts coordinates to a location\n */\nasync function geocodeCoordinates(coordinates: GeolocationCoordinates, listener: IUserPositionListener) {\n    const response = await fetchReverseGeocode(coordinates.latitude, coordinates.longitude);\n\n    if (!response.ok) {\n        listener.onError();\n        return;\n    }\n\n    const json = await response.json();\n\n    let data = formatData(json);\n    // Geocoder does not have altitude so use user position.\n    data.alt = coordinates.altitude || NaN;\n\n    listener.onSuccess(data)\n}\n\n/**\n * Fetches data from reverse geocoding api.\n */\nasync function fetchReverseGeocode(latitude: number, longitude: number): Promise<Response> {\n    const key = process.env.REACT_APP_LOCATIONIQ;\n    const address = \"https://eu1.locationiq.com/v1/reverse.php\";\n\n    return fetch(`${address}?key=${key}&lat=${latitude}&lon=${longitude}&format=json&accept-language=sv`);\n}\n\n/**\n * Formats the json data from the reverse geocoding api.\n */\nfunction formatData(json: any): ILocation {\n    return {\n        country: json.display_name,\n        name: \"~\" + (json.address.city || json.address.municipality || json.address.county || json.address.country),\n        lat: json.lat,\n        long: json.lon,\n        alt: NaN,\n    }\n}\n","import React from \"react\";\nimport WeatherTableList from \"../../weather/WeatherTableList\";\nimport LocationSearch from \"../../location/LocationSearch\";\nimport { Button, Spin, Typography } from 'antd';\nimport { SearchOutlined, SettingOutlined, EnvironmentOutlined } from '@ant-design/icons';\nimport './style.css';\nimport { connect } from \"react-redux\";\nimport { AppState } from \"../../../store\";\nimport { ILocation } from \"../../../location/types\";\nimport SettingsPage from \"../SettingsPage\";\nimport { fetchForecasts } from \"../../../store/forecasts/actions\";\nimport { updateSystemTheme } from \"../../../store/settings/actions\";\nimport { ThemeTypes } from \"../../../store/settings/types\";\nimport SunTimes from \"../../weather/SunTimes\";\nimport { startGeolocate } from \"../../../location/geolocation\";\nimport { selectLocation } from \"../../../store/locationSearch/actions\";\n\nconst { Title } = Typography;\n\ninterface IWeatherPageProps {\n    selectedLocation: ILocation,\n    weatherIsLoading: boolean,\n    fetchForecasts: (location: ILocation) => void,\n    updateSystemTheme: (systemTheme: ThemeTypes) => void,\n    selectLocation: (Location: ILocation) => void,\n}\n\ninterface IWeatherPageState {\n    showLocationSearch: boolean,\n    showSettingsPage: boolean,\n}\n\nclass WeatherPage extends React.Component<IWeatherPageProps, IWeatherPageState>{\n    constructor(props: Readonly<IWeatherPageProps>) {\n        super(props)\n\n        this.state = {\n            showLocationSearch: false,\n            showSettingsPage: false,\n        }\n    }\n\n    componentDidMount() {\n        // Find user position, select it as location, and fetch the forecast\n        this.props.fetchForecasts(this.props.selectedLocation);\n\n        // React on system theme change\n        window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', e => {\n            const theme = e.matches ? \"dark\" : \"light\";\n            this.props.updateSystemTheme(theme);\n        });\n    }\n\n    private openLocationSearch() {\n        this.setState({\n            showLocationSearch: true,\n        })\n    }\n\n    private closeLocationSearch() {\n        this.setState({\n            showLocationSearch: false,\n        });\n    }\n\n    private openSettingsSearch() {\n        this.setState({\n            showSettingsPage: true,\n        })\n    }\n\n    private closeSettingsSearch() {\n        this.setState({\n            showSettingsPage: false,\n        });\n    }\n\n    private geolocate() {\n        startGeolocate({\n            onSuccess: (location: ILocation) => {\n                this.props.selectLocation(location);\n                this.props.fetchForecasts(location);\n            },\n            onError: () => {\n            }\n        })\n    }\n\n\n    render() {\n        return (\n            <React.Fragment>\n\n                <div className=\"weather-page\" style={{ height: 0, overflow: (this.state.showLocationSearch || this.state.showSettingsPage) ? 'hidden' : 'unset' }}>\n                    <div className=\"button-container\">\n                        <Button className=\"settings-button\" ghost icon={<SettingOutlined />} shape=\"circle\" size=\"large\" onClick={() => this.openSettingsSearch()} />\n                        <div>\n                            <Button className=\"user-location-button\" ghost icon={<EnvironmentOutlined />} shape=\"circle\" size=\"large\" onClick={() => this.geolocate()} />\n                            <Button className=\"search-location-button\" ghost icon={<SearchOutlined />} shape=\"circle\" size=\"large\" onClick={() => this.openLocationSearch()} />\n                        </div>\n                    </div>\n                    <Title className=\"title\" style={{ fontWeight: 1, fontSize: 50 }}>{this.props.selectedLocation?.name}</Title>\n\n                    {this.props.weatherIsLoading ?\n                        <Spin className=\"spin\" size=\"large\" />\n                        :\n                        <React.Fragment>\n                            <SunTimes />\n                            <WeatherTableList />\n                        </React.Fragment>\n                    }\n                </div>\n\n                {this.state.showLocationSearch &&\n                    <LocationSearch close={() => this.closeLocationSearch()} />\n                }\n\n                {this.state.showSettingsPage &&\n                    <SettingsPage close={() => this.closeSettingsSearch()} />\n                }\n\n            </React.Fragment>\n        );\n    }\n}\n\nfunction mapStateToProps(state: AppState) {\n    return {\n        selectedLocation: state.locationSearch.selectedLocation,\n        weatherIsLoading: state.forecasts.isLoading,\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) { // TODO: Fix any type\n    return {\n        fetchForecasts: (location: ILocation) => dispatch(fetchForecasts(location)),\n        updateSystemTheme: (systemTheme: ThemeTypes) => dispatch(updateSystemTheme(systemTheme)),\n        selectLocation: (location: ILocation) => dispatch(selectLocation(location)),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherPage);\n","import './App.css';\nimport WeatherPage from './components/pages/WeatherPage';\n\nfunction App() {\n  return (\n    <div id=\"app\">\n      <div id=\"page\">\n        <WeatherPage />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\n/**\n * Sets a new cookie. If a cookie with the given name already exists, it will be overwritten.\n * @param name Name of the cookie.\n * @param value Value of the cookie.\n * @param maxAge Seconds until the cookie will expire. Leave empty for session cookie.\n */\nexport function setCookie(name: string, value: string, maxAge?: number): void {\n    let expires;\n    if (maxAge) {\n        expires = \"; max-age=\" + maxAge;\n    } else {\n        expires = \"\";\n    }\n\n    document.cookie = name + \"=\" + encodeURI(value) + expires + \"; SameSite=Strict; path=/\";\n}\n\n/**\n * Returns the value of a cookie. If the cookie does not exist, null is returned.\n * @param name Name of the cookie.\n * @returns Value of the cookie or null.\n */\nexport function getCookie(name: string): string | null {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n        const [cookieName, cookieValue] = cookies[i].trim().split('=');\n\n        if (cookieName === name) {\n            return decodeURI(cookieValue);\n        }\n    }\n\n    return null;\n}\n\n/**\n * Checks if a cookie exists.\n * @param name Name of the cookie.\n * @returns True if it exists, otherwise false.\n */\nexport function existsCookie(name: string): boolean {\n    const cookies = document.cookie.split(';');\n\n    for (let i = 0; i < cookies.length; i++) {\n        const cookieName = cookies[i].split('=')[0];\n\n        if (cookieName === name) {\n            return true;\n        }\n    }\n\n    return false;\n}\n\n/**\n * Deletes a cookie.\n * @param name Name of the cookie to delete.\n */\nexport function deleteCookie(name: string): void {\n    document.cookie = name + '=; Expires=Thu, 01 Jan 1970 00:00:01 GMT; Path=/;';\n}\n","import { deleteCookie, getCookie, setCookie } from \"../../helpers/cookies\";\nimport { ILocation } from \"../../location/types\";\nimport { GEOCODE_FAILURE, GEOCODE_START, GEOCODE_SUCCESS, ILocationSearchState, LocationActionTypes, SELECT_LOCATION } from \"./types\";\n\nconst initialState = createInitialState();\nconst MAX_HISTORY_LENGTH = 5;\n\nvar deleteOldCookie = false; // TODO: Remove\n\nexport function locationSearchReducer(state = initialState, action: LocationActionTypes): ILocationSearchState {\n    switch (action.type) {\n        case SELECT_LOCATION:\n            let history = [...state.locationHistory];\n\n            const index = history.findIndex(e => e.name === action.location.name);\n            if (index !== -1) {\n                history.splice(index, 1);\n            }\n            if (history.length >= MAX_HISTORY_LENGTH) {\n                history.splice(MAX_HISTORY_LENGTH - 2, history.length - 1);\n            }\n            history.unshift(action.location);\n\n            saveHistory(history);\n\n            return {\n                ...state,\n                selectedLocation: action.location,\n                locationHistory: history,\n            };\n        case GEOCODE_START:\n            return {\n                ...state,\n                geocodeIsLoading: true\n            };\n        case GEOCODE_SUCCESS:\n            return {\n                ...state,\n                geocodeIsLoading: false,\n                geocodeResults: action.results,\n                geocodeErrorMessage: \"\",\n            }\n        case GEOCODE_FAILURE:\n            return {\n                ...state,\n                geocodeIsLoading: false,\n                geocodeResults: [],\n                geocodeErrorMessage: action.errorMessage\n            };\n        default:\n            return state;\n    }\n}\n\nfunction saveHistory(history: ILocation[]): void {\n    const str = JSON.stringify(history);\n    setCookie(\"weather-locations\", str, 60 * 60 * 24 * 365);\n    deleteCookie(\"weather-location\");\n}\n\nfunction loadHistory(): ILocation[] {\n    const json = getCookie(\"weather-locations\");\n\n    if (json !== null) {\n        try {\n            let history: ILocation[] = JSON.parse(json);\n            return history;\n        } catch { }\n    }\n\n    return [];\n}\n\n// TODO: This is temporary. Delete in future.\n/**\n * Checks if the old cookie is remaining. If so, return the weather.\n */\nfunction getOldCookie(): ILocation | null {\n    const json = getCookie(\"weather-location\");\n\n    if (json !== null) {\n        deleteOldCookie = true;\n        try {\n            let old_location: ILocation = JSON.parse(json);\n            return old_location;\n\n        } catch { }\n    }\n\n    return null;\n}\n\nfunction getDefaultLocation(): ILocation {\n    return {\n        name: \"Stockholm\",\n        country: \"Sverige\",\n        lat: 59.33066,\n        long: 18.06855,\n        alt: 10,\n    }\n}\n\nfunction createInitialState(): ILocationSearchState {\n    const history = loadHistory();\n\n    let selectedLocation: ILocation;\n    if (history.length > 0) {\n        selectedLocation = history[0];\n    } else {\n        // TODO: This is temporary. Delete in future.\n        // Use old cookie if no history\n        const old = getOldCookie();\n        selectedLocation = old !== null ? old : getDefaultLocation();\n    }\n\n    return {\n        selectedLocation: selectedLocation,\n        locationHistory: history,\n        geocodeResults: [],\n        geocodeIsLoading: false,\n        geocodeErrorMessage: '',\n    }\n}","import { IWeatherState as IForecastState, ForecastActionTypes, FORECAST_FETCH_START, FORECAST_FETCH_SUCCESS, FORECAST_FETCH_FAILURE } from \"./types\";\nimport { createEmptyForecast } from \"../../weather/emptyForecast\";\n\nconst initialState: IForecastState = {\n    forecast: createEmptyForecast(undefined),\n    isLoading: true,\n    errorMessage: undefined,\n}\n\nexport function forecastReducer(state = initialState, action: ForecastActionTypes): IForecastState {\n    switch (action.type) {\n        case FORECAST_FETCH_START:\n            return {\n                ...state,\n                isLoading: true,\n            };\n\n        case FORECAST_FETCH_SUCCESS:\n            return {\n                ...state,\n                forecast: action.forecast,\n                isLoading: false,\n                errorMessage: undefined,\n            };\n\n        case FORECAST_FETCH_FAILURE:\n            return {\n                ...state,\n                isLoading: false,\n                errorMessage: action.errorMessage,\n            }\n\n        default:\n            return state;\n    }\n}\n","import { getCookie, setCookie } from \"../../helpers/cookies\";\nimport { ISettingsState, SettingsActionTypes, ThemeModeTypes, ThemeTypes, UPDATE_SETTING, UPDATE_SYSTEM_THEME, UPDATE_THEME_MODE } from \"./types\";\n\nconst THEME_MODE_COOKIE = \"theme-mode\";\n\nconst initialState: ISettingsState = {\n    themeMode: getCookie(THEME_MODE_COOKIE) as ThemeModeTypes || \"system\",\n    systemTheme: getInitialSystemTheme(),\n    theme: \"light\",\n    showGust: getCookie(\"show-gust\") === \"true\",\n    showMinMaxTemp: getCookie(\"show-min-max-temp\") === \"true\",\n}\n\nexport function settingsReducer(state = initialState, action: SettingsActionTypes): ISettingsState {\n    switch (action.type) {\n        case UPDATE_THEME_MODE:\n\n            let theme: ThemeTypes;\n            switch (action.themeMode) {\n                case \"light\":\n                    theme = \"light\";\n                    break;\n                case \"dark\":\n                    theme = \"dark\";\n                    break;\n                case \"system\":\n                    theme = state.systemTheme;\n            }\n\n            applyTheme(theme);\n            setCookie(THEME_MODE_COOKIE, action.themeMode, 365 * 24 * 60 * 60)\n\n            return {\n                ...state,\n                themeMode: action.themeMode,\n                theme: theme,\n            };\n\n        case UPDATE_SYSTEM_THEME:\n            if (state.themeMode === \"system\") {\n                applyTheme(action.systemTheme);\n            }\n\n            return {\n                ...state,\n                systemTheme: action.systemTheme,\n            }\n\n        case UPDATE_SETTING:\n            if (action.setting.showGust !== undefined) {\n                setCookie(\"show-gust\", action.setting.showGust.toString(), 365 * 24 * 60 * 60)\n            }\n            if (action.setting.showMinMaxTemp !== undefined) {\n                setCookie(\"show-min-max-temp\", action.setting.showMinMaxTemp.toString(), 365 * 24 * 60 * 60)\n            }\n\n            return {\n                ...state,\n                ...action.setting,\n            }\n\n        default:\n            return state;\n    }\n}\n\nfunction applyTheme(theme: ThemeTypes) {\n    const DARK_CLASS = \"dark\";\n\n    if (theme === \"dark\") {\n        document.documentElement.classList.add(DARK_CLASS);\n    } else {\n        document.documentElement.classList.remove(DARK_CLASS);\n    }\n}\n\nfunction getInitialSystemTheme(): ThemeTypes {\n    if (window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        return \"dark\";\n    } else {\n        return \"light\";\n    }\n}\n\nfunction setInitialTheme() {\n    let theme: ThemeTypes;\n    switch (initialState.themeMode) {\n        case \"light\":\n            theme = \"light\";\n            break;\n        case \"dark\":\n            theme = \"dark\";\n            break;\n        case \"system\":\n            theme = initialState.systemTheme;\n    }\n\n    applyTheme(theme);\n}\n\nsetInitialTheme();","import { createStore, compose, combineReducers, applyMiddleware } from \"redux\";\nimport thunk from 'redux-thunk';\nimport { locationSearchReducer } from \"./locationSearch/reducers\";\nimport { forecastReducer } from \"./forecasts/reducers\";\nimport { settingsReducer } from \"./settings/reducers\";\nimport { isDev } from \"../helpers/devDetect\";\n\nconst rootReducer = combineReducers({\n    locationSearch: locationSearchReducer,\n    forecasts: forecastReducer,\n    settings: settingsReducer,\n});\n\ndeclare global {\n    interface Window {\n        __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\n    }\n}\n\nconst composeEnhancers = (isDev() && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : compose;\n\nconst initialState = {}\n\nexport default createStore(\n    rootReducer,\n    initialState,\n    compose(\n        applyMiddleware(thunk),\n        composeEnhancers()\n    )\n);\n\nexport type AppState = ReturnType<typeof rootReducer>\n","import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { register } from './serviceWorker';\nimport store from \"./store\";\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n//unregister();\nregister();\n"],"sourceRoot":""}